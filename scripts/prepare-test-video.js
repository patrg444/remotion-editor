const fs = require('fs');
const path = require('path');

const PUBLIC_DIR = path.join(__dirname, '..', 'public');
const VIDEO_PATH = path.join(PUBLIC_DIR, 'test.mp4');
const WEBM_PATH = path.join(PUBLIC_DIR, 'test.webm');

// Create test-assets directory if it doesn't exist
if (!fs.existsSync(PUBLIC_DIR)) {
    fs.mkdirSync(PUBLIC_DIR, { recursive: true });
}

// Create a simple WebM video file with VP8 codec
const videoData = Buffer.from([
    // WebM header
    0x1A, 0x45, 0xDF, 0xA3, // EBML header
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, // EBML size
    0x42, 0x86, 0x81, 0x01, // EBMLVersion
    0x42, 0xF7, 0x81, 0x01, // EBMLReadVersion
    0x42, 0xF2, 0x81, 0x04, // EBMLMaxIDLength
    0x42, 0xF3, 0x81, 0x08, // EBMLMaxSizeLength
    0x42, 0x82, 0x84, 0x77, 0x65, 0x62, 0x6D, // DocType "webm"
    0x42, 0x87, 0x81, 0x02, // DocTypeVersion
    0x42, 0x85, 0x81, 0x02, // DocTypeReadVersion
    // Segment
    0x18, 0x53, 0x80, 0x67, // Segment
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, // Segment size
    // Tracks
    0x16, 0x54, 0xAE, 0x6B, // Tracks
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, // Tracks size
    // TrackEntry
    0xAE, // TrackEntry
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // TrackEntry size
    0xD7, 0x81, 0x01, // TrackNumber
    0x83, 0x81, 0x01, // TrackType (1 = video)
    0x86, 0x85, 0x56, 0x50, 0x38, 0x30 // CodecID "VP80"
]);

// Write both MP4 and WebM versions
fs.writeFileSync(VIDEO_PATH, videoData);
fs.writeFileSync(WEBM_PATH, videoData);

console.log(`Test video files created at: ${VIDEO_PATH} and ${WEBM_PATH}`);
