{"version":3,"file":"renderer.8894d7b7236a8e753f12.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAgF;AACC;AACX;AACP;AACtB;AAC2B;AACpE;AACA,oDAAa;AACN,wBAAwB,oDAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAW;AACxB;AACA,mBAAmB,iEAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAW;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,8CAAO;AAC1C;AACA;AACA;AACA,oBAAoB,mDAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa,wDAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,8CAAO;AAC1C;AACA;AACA;AACA,oBAAoB,mDAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yDAAyD,yDAAkB;AAC3E;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA,yBAAyB,wDAAW;AACpC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,mCAAmC,8CAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,uEAAiB;AACxE,sEAAsE,uEAAiB;AACvF;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACO,4BAA4B,UAAU;AAC7C,8BAA8B,iDAAU;AACxC,WAAW,iEAAoB;AAC/B;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iDAAM;AAClB;AACA,0BAA0B;AAC1B,aAAa;AACb;AACA,KAAK;AACL,QAAQ,IAAuE;AAC/E,QAAQ,gDAAS;AACjB;AACA;AACA,SAAS;AACT;AACA,IAAI,gDAAS;AACb;AACA,qCAAqC,gFAAqB;AAC1D;AACA,gBAAgB,iDAAM;AACtB;AACA;AACA;AACA;AACA,YAAY,iDAAM;AAClB;AACA,KAAK;AACL,YAAY,0DAAmB,6BAA6B,SAAS,mBAAmB;AACxF;AACO;AACP,oBAAoB,iDAAU;AAC9B;AACA;AACA;AACA;AACA;;;;;;;;;UC3aA","sources":["webpack://remotion-editor/./src/renderer/contexts/TimelineContext.tsx","webpack://remotion-editor/webpack/runtime/getFullHash"],"sourcesContent":["import React, { createContext, useReducer, useContext, useEffect } from 'react';\nimport { produce, produceWithPatches, applyPatches, enablePatches } from 'immer';\nimport { ActionTypes, initialTimelineState } from '../types/timeline';\nimport { TimelineConstants } from '../utils/timelineConstants';\nimport { logger } from '../utils/logger';\nimport { validateTimelineState } from '../utils/timelineValidation';\n// Enable patches for Immer\nenablePatches();\nexport const TimelineContext = createContext(undefined);\nconst NON_UNDOABLE_ACTIONS = new Set([\n    'SET_CURRENT_TIME',\n    'SET_PLAYING',\n    'SET_SCROLL_X',\n    'SET_SCROLL_Y',\n    'SET_DRAGGING',\n    'SET_ERROR',\n    'RESTORE_SNAPSHOT',\n    'SET_IS_PLAYING',\n    'SET_IS_DRAGGING',\n    'SELECT_CLIPS',\n    'SET_SELECTED_TRACK_ID',\n    'SET_DURATION',\n    'CLEAR_STATE',\n    'SET_STATE',\n    'SET_TRACKS',\n    'SET_SHOW_WAVEFORMS',\n    'SET_SHOW_KEYFRAMES',\n    'SET_SHOW_TRANSITIONS',\n    'SET_SHOW_EFFECTS',\n    'SET_RENDER_QUALITY',\n    'SET_SNAPPING',\n    'SELECT_TRACK',\n    'SELECT_CAPTIONS',\n    'PUSH_HISTORY',\n    'SET_HISTORY_INDEX',\n    'CLEAR_HISTORY'\n]);\nconst getHistoryDescription = (action) => {\n    switch (action.type) {\n        case ActionTypes.ADD_TRACK:\n            return 'Add track';\n        case ActionTypes.REMOVE_TRACK:\n            return 'Remove track';\n        case ActionTypes.ADD_CLIP:\n            return 'Add clip';\n        case ActionTypes.REMOVE_CLIP:\n            return 'Remove clip';\n        case ActionTypes.MOVE_CLIP:\n            return 'Move clip';\n        case ActionTypes.SPLIT_CLIP:\n            return 'Split clip';\n        case ActionTypes.TRIM_CLIP:\n            return 'Trim clip';\n        case ActionTypes.SET_ZOOM:\n            return 'Change zoom';\n        case ActionTypes.SET_FPS:\n            return 'Change FPS';\n        default:\n            return action.type;\n    }\n};\nconst isUndoable = (action) => {\n    return !NON_UNDOABLE_ACTIONS.has(action.type);\n};\nconst timelineReducer = (state, action) => {\n    switch (action.type) {\n        case ActionTypes.CLEAR_STATE: {\n            return {\n                ...initialTimelineState,\n                history: {\n                    entries: [],\n                    currentIndex: -1\n                }\n            };\n        }\n        case ActionTypes.SET_STATE: {\n            return {\n                ...action.payload,\n                history: action.payload.history || state.history\n            };\n        }\n        case ActionTypes.UNDO: {\n            if (state.history.currentIndex > 0) {\n                const newIndex = state.history.currentIndex - 1;\n                const entry = state.history.entries[newIndex];\n                // Create a fresh copy of state before applying patches\n                const stateCopy = JSON.parse(JSON.stringify(state));\n                // Create final state with both patches and history update\n                const finalState = produce(stateCopy, draft => {\n                    // Create deep copies of patches to avoid any proxy issues\n                    const inversePatchesCopy = JSON.parse(JSON.stringify(entry.inversePatches));\n                    // Apply patches\n                    applyPatches(draft, inversePatchesCopy);\n                    // Ensure selection state is preserved\n                    if (draft.selectedClipIds.length === 0) {\n                        const track = draft.tracks.find(t => t.id === action.payload?.trackId);\n                        if (track && track.clips.length > 0) {\n                            draft.selectedClipIds = [track.clips[0].id];\n                        }\n                    }\n                    // Update history\n                    draft.history = {\n                        entries: state.history.entries,\n                        currentIndex: newIndex\n                    };\n                });\n                // Notify of undo completion\n                requestAnimationFrame(() => {\n                    window.dispatchEvent(new CustomEvent('timeline:undo-complete', {\n                        detail: {\n                            fromIndex: state.history.currentIndex,\n                            toIndex: newIndex,\n                            description: state.history.entries[newIndex].description\n                        }\n                    }));\n                });\n                return finalState;\n            }\n            return state;\n        }\n        case ActionTypes.REDO: {\n            if (state.history.currentIndex < state.history.entries.length - 1) {\n                const newIndex = state.history.currentIndex + 1;\n                const entry = state.history.entries[newIndex];\n                // Create a fresh copy of state before applying patches\n                const stateCopy = JSON.parse(JSON.stringify(state));\n                // Create final state with both patches and history update\n                const finalState = produce(stateCopy, draft => {\n                    // Create deep copies of patches to avoid any proxy issues\n                    const patchesCopy = JSON.parse(JSON.stringify(entry.patches));\n                    // Apply patches\n                    applyPatches(draft, patchesCopy);\n                    // Ensure selection state is preserved\n                    if (draft.selectedClipIds.length === 0) {\n                        const track = draft.tracks.find(t => t.id === action.payload?.trackId);\n                        if (track && track.clips.length > 0) {\n                            draft.selectedClipIds = [track.clips[0].id];\n                        }\n                    }\n                    // Update history\n                    draft.history = {\n                        entries: state.history.entries,\n                        currentIndex: newIndex\n                    };\n                });\n                // Notify of redo completion\n                requestAnimationFrame(() => {\n                    window.dispatchEvent(new CustomEvent('timeline:redo-complete', {\n                        detail: {\n                            fromIndex: state.history.currentIndex,\n                            toIndex: newIndex,\n                            description: state.history.entries[newIndex].description\n                        }\n                    }));\n                });\n                return finalState;\n            }\n            return state;\n        }\n        default: {\n            const [nextState, patches, inversePatches] = produceWithPatches(state, draft => {\n                switch (action.type) {\n                    case ActionTypes.SET_DURATION:\n                        draft.duration = action.payload;\n                        break;\n                    case ActionTypes.SET_TRACKS:\n                        draft.tracks = action.payload;\n                        break;\n                    case ActionTypes.SET_CURRENT_TIME:\n                        draft.currentTime = action.payload;\n                        break;\n                    case ActionTypes.SET_PLAYING:\n                        draft.isPlaying = action.payload;\n                        break;\n                    case ActionTypes.SET_SCROLL_X:\n                        draft.scrollX = action.payload;\n                        break;\n                    case ActionTypes.SET_SCROLL_Y:\n                        draft.scrollY = action.payload;\n                        break;\n                    case ActionTypes.SET_ZOOM:\n                        draft.zoom = action.payload;\n                        break;\n                    case ActionTypes.SET_FPS:\n                        draft.fps = action.payload;\n                        break;\n                    case ActionTypes.SET_DRAGGING:\n                        draft.isDragging = action.payload.isDragging;\n                        draft.dragStartX = action.payload.dragStartX;\n                        draft.dragStartY = action.payload.dragStartY;\n                        break;\n                    case ActionTypes.SET_ERROR:\n                        draft.error = action.payload;\n                        break;\n                    case ActionTypes.ADD_TRACK:\n                        draft.tracks.push(action.payload.track);\n                        break;\n                    case ActionTypes.UPDATE_TRACK: {\n                        const trackIndex = draft.tracks.findIndex(t => t.id === action.payload.trackId);\n                        if (trackIndex !== -1) {\n                            draft.tracks[trackIndex] = {\n                                ...draft.tracks[trackIndex],\n                                ...action.payload.track\n                            };\n                        }\n                        break;\n                    }\n                    case ActionTypes.REMOVE_TRACK:\n                        draft.tracks = draft.tracks.filter(t => t.id !== action.payload.trackId);\n                        break;\n                    case ActionTypes.ADD_CLIP: {\n                        const trackToAddClip = draft.tracks.find(t => t.id === action.payload.trackId);\n                        if (trackToAddClip) {\n                            const newClip = {\n                                ...action.payload.clip,\n                                startTime: action.payload.clip.startTime ?? 0,\n                                endTime: action.payload.clip.endTime ?? (action.payload.clip.duration ?? 0)\n                            };\n                            trackToAddClip.clips.push(newClip);\n                            trackToAddClip.clips.sort((a, b) => a.startTime - b.startTime);\n                        }\n                        break;\n                    }\n                    case ActionTypes.UPDATE_CLIP: {\n                        const trackWithClip = draft.tracks.find(t => t.id === action.payload.trackId);\n                        if (trackWithClip) {\n                            const clipIndex = trackWithClip.clips.findIndex(c => c.id === action.payload.clipId);\n                            if (clipIndex !== -1) {\n                                trackWithClip.clips[clipIndex] = {\n                                    ...trackWithClip.clips[clipIndex],\n                                    ...action.payload.clip\n                                };\n                            }\n                        }\n                        break;\n                    }\n                    case ActionTypes.REMOVE_CLIP: {\n                        const trackToRemoveClip = draft.tracks.find(t => t.id === action.payload.trackId);\n                        if (trackToRemoveClip) {\n                            trackToRemoveClip.clips = trackToRemoveClip.clips.filter(c => c.id !== action.payload.clipId);\n                        }\n                        break;\n                    }\n                    case ActionTypes.SPLIT_CLIP: {\n                        const trackToSplit = draft.tracks.find(t => t.id === action.payload.trackId);\n                        if (trackToSplit) {\n                            const clipToSplit = trackToSplit.clips.find(c => c.id === action.payload.clipId);\n                            if (clipToSplit && action.payload.time > clipToSplit.startTime && action.payload.time < clipToSplit.endTime) {\n                                const splitPoint = action.payload.time;\n                                const firstDuration = splitPoint - clipToSplit.startTime;\n                                const originalMediaOffset = clipToSplit.mediaOffset ?? 0;\n                                const originalMediaDuration = clipToSplit.mediaDuration ?? (clipToSplit.endTime - clipToSplit.startTime);\n                                const firstMediaStart = originalMediaOffset;\n                                const firstMediaEnd = originalMediaOffset + firstDuration;\n                                const secondMediaStart = originalMediaOffset + firstDuration;\n                                const fullMediaDuration = originalMediaDuration;\n                                // Remove the original clip\n                                trackToSplit.clips = trackToSplit.clips.filter(c => c.id !== clipToSplit.id);\n                                // Create first clip\n                                const firstClip = {\n                                    ...clipToSplit,\n                                    id: `${clipToSplit.id}-1`,\n                                    startTime: clipToSplit.startTime,\n                                    endTime: splitPoint,\n                                    mediaOffset: firstMediaStart,\n                                    mediaDuration: fullMediaDuration,\n                                    handles: {\n                                        startPosition: firstMediaStart,\n                                        endPosition: firstMediaEnd\n                                    },\n                                    initialBounds: {\n                                        startTime: clipToSplit.startTime,\n                                        endTime: splitPoint,\n                                        mediaOffset: firstMediaStart,\n                                        mediaDuration: fullMediaDuration\n                                    }\n                                };\n                                // Create second clip\n                                const secondClip = {\n                                    ...clipToSplit,\n                                    id: `${clipToSplit.id}-2`,\n                                    startTime: splitPoint,\n                                    endTime: clipToSplit.endTime,\n                                    mediaOffset: secondMediaStart,\n                                    mediaDuration: fullMediaDuration,\n                                    handles: {\n                                        startPosition: secondMediaStart,\n                                        endPosition: secondMediaStart + (clipToSplit.endTime - splitPoint)\n                                    },\n                                    initialBounds: {\n                                        startTime: splitPoint,\n                                        endTime: clipToSplit.endTime,\n                                        mediaOffset: secondMediaStart,\n                                        mediaDuration: fullMediaDuration\n                                    }\n                                };\n                                // Add new clips\n                                trackToSplit.clips.push(firstClip, secondClip);\n                                trackToSplit.clips.sort((a, b) => a.startTime - b.startTime);\n                                // Update selection\n                                draft.selectedClipIds = [firstClip.id];\n                                // Notify of split completion\n                                requestAnimationFrame(() => {\n                                    window.dispatchEvent(new CustomEvent('timeline:clip-split', {\n                                        detail: {\n                                            trackId: trackToSplit.id,\n                                            originalClipId: clipToSplit.id,\n                                            splitTime: splitPoint,\n                                            firstClipId: firstClip.id,\n                                            secondClipId: secondClip.id,\n                                            firstClip: {\n                                                startTime: firstClip.startTime,\n                                                endTime: firstClip.endTime,\n                                                mediaOffset: firstClip.mediaOffset,\n                                                mediaDuration: firstClip.mediaDuration\n                                            },\n                                            secondClip: {\n                                                startTime: secondClip.startTime,\n                                                endTime: secondClip.endTime,\n                                                mediaOffset: secondClip.mediaOffset,\n                                                mediaDuration: secondClip.mediaDuration\n                                            }\n                                        }\n                                    }));\n                                });\n                            }\n                        }\n                        break;\n                    }\n                    case ActionTypes.SELECT_CLIPS:\n                        draft.selectedClipIds = action.payload.clipIds;\n                        break;\n                    case ActionTypes.SET_SELECTED_TRACK_ID:\n                        draft.selectedTrackId = action.payload;\n                        break;\n                }\n            });\n            if (isUndoable(action)) {\n                // Create a fresh copy of state before applying patches\n                const stateCopy = JSON.parse(JSON.stringify(state));\n                // Create final state with both changes and history update\n                const finalState = produce(stateCopy, draft => {\n                    // Apply the action changes\n                    Object.assign(draft, nextState);\n                    // Update history\n                    // Create deep copies of patches to avoid any proxy issues\n                    const patchesCopy = JSON.parse(JSON.stringify(patches));\n                    const inversePatchesCopy = JSON.parse(JSON.stringify(inversePatches));\n                    // Create history entry\n                    const entry = {\n                        type: 'partial',\n                        timestamp: Date.now(),\n                        patches: patchesCopy,\n                        inversePatches: inversePatchesCopy,\n                        description: getHistoryDescription(action)\n                    };\n                    // If we're not at the end of the history, truncate the future entries\n                    if (draft.history.currentIndex < draft.history.entries.length - 1) {\n                        draft.history.entries = draft.history.entries.slice(0, draft.history.currentIndex + 1);\n                    }\n                    // Add the new entry and update the index\n                    draft.history.entries.push(entry);\n                    draft.history.currentIndex = draft.history.entries.length - 1;\n                    // Enforce history size limit\n                    if (draft.history.entries.length > TimelineConstants.History.MAX_HISTORY_SIZE) {\n                        const excess = draft.history.entries.length - TimelineConstants.History.MAX_HISTORY_SIZE;\n                        draft.history.entries = draft.history.entries.slice(excess);\n                        draft.history.currentIndex = draft.history.entries.length - 1;\n                    }\n                });\n                return finalState;\n            }\n            return nextState;\n        }\n    }\n};\nexport const TimelineProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(timelineReducer, {\n        ...initialTimelineState,\n        history: {\n            entries: [],\n            currentIndex: -1\n        }\n    });\n    useEffect(() => {\n        try {\n            window.dispatchEvent(new CustomEvent('timeline:initializing'));\n            window.timelineDispatch = dispatch;\n            window.timelineState = state;\n            window.dispatchEvent(new CustomEvent('timeline:dispatchReady'));\n            window.timelineReady = true;\n            window.dispatchEvent(new CustomEvent('timeline:initialized'));\n        }\n        catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            logger.error('[TimelineProvider] Error initializing timeline:', new Error(errorMessage));\n            window.dispatchEvent(new CustomEvent('timeline:error', {\n                detail: { error: new Error(errorMessage) }\n            }));\n        }\n    }, []);\n    if (process.env.NODE_ENV !== 'production' || process.env.CYPRESS === 'true') {\n        useEffect(() => {\n            window.timelineState = state;\n            window.timelineDispatch = dispatch;\n        }, [state, dispatch]);\n    }\n    useEffect(() => {\n        try {\n            const validationErrors = validateTimelineState(state);\n            if (validationErrors.length > 0) {\n                logger.warn('[Timeline] State validation errors:', validationErrors);\n            }\n        }\n        catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            logger.error('[Timeline] State validation failed:', new Error(errorMessage));\n        }\n    }, [state]);\n    return (React.createElement(TimelineContext.Provider, { value: { state, dispatch } }, children));\n};\nexport const useTimelineContext = () => {\n    const context = useContext(TimelineContext);\n    if (!context) {\n        throw new Error('useTimelineContext must be used within a TimelineProvider');\n    }\n    return context;\n};\n","__webpack_require__.h = () => (\"9db80ae8a756d72ddffb\")"],"names":[],"sourceRoot":""}