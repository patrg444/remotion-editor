{"version":3,"file":"renderer.f1082db563f5ff4cf8d8.hot-update.js","mappings":";;;;;;;;;;;;;;AAAqD;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,6DAAc;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,KAAK,6DAAc;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,KAAK,6DAAc;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,KAAK,6DAAc;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,KAAK,6DAAc;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,KAAK,6DAAc;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,KAAK,6DAAc;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,WAAW,EAAC;;;;;;;;;UCnN3B","sources":["webpack://remotion-editor/./src/renderer/transitions/shaders.ts","webpack://remotion-editor/webpack/runtime/getFullHash"],"sourcesContent":["import { TransitionType } from '../types/transition';\n// Common vertex shader (pass-through)\nconst commonVertexShader = `#version 300 es\nin vec2 position;\nout vec2 vUv;\n\nvoid main() {\n    vUv = position * 0.5 + 0.5;\n    gl_Position = vec4(position, 0.0, 1.0);\n}`;\n// Core fragment shaders\nconst dissolveShader = `#version 300 es\nprecision highp float;\n\nuniform sampler2D fromTexture;\nuniform sampler2D toTexture;\nuniform float progress;\n\nin vec2 vUv;\nout vec4 fragColor;\n\nvoid main() {\n    vec4 fromColor = texture(fromTexture, vUv);\n    vec4 toColor = texture(toTexture, vUv);\n    fragColor = mix(fromColor, toColor, progress);\n}`;\nconst fadeShader = `#version 300 es\nprecision highp float;\n\nuniform sampler2D fromTexture;\nuniform sampler2D toTexture;\nuniform float progress;\n\nin vec2 vUv;\nout vec4 fragColor;\n\nvoid main() {\n    vec4 fromColor = texture(fromTexture, vUv);\n    vec4 toColor = texture(toTexture, vUv);\n    fromColor.a = 1.0 - progress;\n    toColor.a = progress;\n    fragColor = mix(fromColor, toColor, progress);\n}`;\nconst slideShader = `#version 300 es\nprecision highp float;\n\nuniform sampler2D fromTexture;\nuniform sampler2D toTexture;\nuniform float progress;\nuniform vec2 direction;\n\nin vec2 vUv;\nout vec4 fragColor;\n\nvoid main() {\n    vec2 p = vUv + progress * direction;\n    vec2 f = clamp(p, 0.0, 1.0);\n    vec2 t = clamp(p - direction, 0.0, 1.0);\n    \n    vec4 fromColor = texture(fromTexture, f);\n    vec4 toColor = texture(toTexture, t);\n    \n    fragColor = mix(fromColor, toColor, step(0.0, progress * 2.0 - 1.0));\n}`;\nconst zoomShader = `#version 300 es\nprecision highp float;\n\nuniform sampler2D fromTexture;\nuniform sampler2D toTexture;\nuniform float progress;\n\nin vec2 vUv;\nout vec4 fragColor;\n\nvoid main() {\n    vec2 center = vec2(0.5, 0.5);\n    vec2 fromCoord = center + (vUv - center) * (1.0 - progress);\n    vec2 toCoord = center + (vUv - center) * progress;\n    \n    vec4 fromColor = texture(fromTexture, fromCoord);\n    vec4 toColor = texture(toTexture, toCoord);\n    \n    fragColor = mix(fromColor, toColor, progress);\n}`;\nconst pushShader = `#version 300 es\nprecision highp float;\n\nuniform sampler2D fromTexture;\nuniform sampler2D toTexture;\nuniform float progress;\nuniform vec2 direction;\n\nin vec2 vUv;\nout vec4 fragColor;\n\nvoid main() {\n    vec2 p = vUv - progress * direction;\n    vec2 f = clamp(p, 0.0, 1.0);\n    vec2 t = clamp(p + direction, 0.0, 1.0);\n    \n    vec4 fromColor = texture(fromTexture, f);\n    vec4 toColor = texture(toTexture, t);\n    \n    fragColor = mix(fromColor, toColor, step(1.0, p.x + p.y));\n}`;\nconst wipeShader = `#version 300 es\nprecision highp float;\n\nuniform sampler2D fromTexture;\nuniform sampler2D toTexture;\nuniform float progress;\nuniform vec2 direction;\n\nin vec2 vUv;\nout vec4 fragColor;\n\nvoid main() {\n    vec4 fromColor = texture(fromTexture, vUv);\n    vec4 toColor = texture(toTexture, vUv);\n    \n    float threshold = dot(vUv - 0.5, normalize(direction));\n    float edge = smoothstep(-0.1, 0.1, threshold - progress + 0.5);\n    \n    fragColor = mix(toColor, fromColor, edge);\n}`;\nconst createFloat = (name, defaultValue = 0) => ({\n    type: 'float',\n    value: defaultValue,\n    defaultValue,\n    name\n});\nconst createSampler2D = (name) => ({\n    type: 'sampler2D',\n    value: null,\n    defaultValue: null,\n    name\n});\nconst createVec2 = (name, defaultValue = [1, 0]) => ({\n    type: 'vec2',\n    value: defaultValue,\n    defaultValue,\n    name\n});\nconst transitions = {\n    [TransitionType.Dissolve]: {\n        vertexShader: commonVertexShader,\n        fragmentShader: dissolveShader,\n        uniforms: {\n            progress: createFloat('progress'),\n            fromTexture: createSampler2D('fromTexture'),\n            toTexture: createSampler2D('toTexture')\n        }\n    },\n    [TransitionType.Fade]: {\n        vertexShader: commonVertexShader,\n        fragmentShader: fadeShader,\n        uniforms: {\n            progress: createFloat('progress'),\n            fromTexture: createSampler2D('fromTexture'),\n            toTexture: createSampler2D('toTexture')\n        }\n    },\n    [TransitionType.Wipe]: {\n        vertexShader: commonVertexShader,\n        fragmentShader: wipeShader,\n        uniforms: {\n            progress: createFloat('progress'),\n            fromTexture: createSampler2D('fromTexture'),\n            toTexture: createSampler2D('toTexture'),\n            direction: createVec2('direction')\n        }\n    },\n    [TransitionType.Slide]: {\n        vertexShader: commonVertexShader,\n        fragmentShader: slideShader,\n        uniforms: {\n            progress: createFloat('progress'),\n            fromTexture: createSampler2D('fromTexture'),\n            toTexture: createSampler2D('toTexture'),\n            direction: createVec2('direction')\n        }\n    },\n    [TransitionType.Crossfade]: {\n        vertexShader: commonVertexShader,\n        fragmentShader: dissolveShader,\n        uniforms: {\n            progress: createFloat('progress'),\n            fromTexture: createSampler2D('fromTexture'),\n            toTexture: createSampler2D('toTexture')\n        }\n    },\n    [TransitionType.Zoom]: {\n        vertexShader: commonVertexShader,\n        fragmentShader: zoomShader,\n        uniforms: {\n            progress: createFloat('progress'),\n            fromTexture: createSampler2D('fromTexture'),\n            toTexture: createSampler2D('toTexture')\n        }\n    },\n    [TransitionType.Push]: {\n        vertexShader: commonVertexShader,\n        fragmentShader: pushShader,\n        uniforms: {\n            progress: createFloat('progress'),\n            fromTexture: createSampler2D('fromTexture'),\n            toTexture: createSampler2D('toTexture'),\n            direction: createVec2('direction')\n        }\n    }\n};\nexport default transitions;\n","__webpack_require__.h = () => (\"43455021576e868cf186\")"],"names":[],"sourceRoot":""}