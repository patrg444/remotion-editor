{"version":3,"file":"renderer.675a2d97ad7b1238b137.hot-update.js","mappings":";;;;;;;;;;;;;;;AAAkC;AAC3B;AACP;AACA;AACA;AACA,QAAQ,2CAAM,0CAA0C,aAAa;AACrE;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,QAAQ,2CAAM,uCAAuC,+BAA+B;AACpF;AACA,0BAA0B;AAC1B;AACA,iBAAiB;AACjB;AACA;AACA,QAAQ,2CAAM;AACd;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,gBAAgB,2BAA2B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oEAAoE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA,iDAAiD;AACjD;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2BAA2B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;UChSA","sources":["webpack://remotion-editor/./src/renderer/utils/historyDiff.ts","webpack://remotion-editor/webpack/runtime/getFullHash"],"sourcesContent":["import { logger } from './logger';\nexport const createStateDiff = (before, after, description, isCheckpoint = false) => {\n    const timestamp = Date.now();\n    // For checkpoint actions, store full state snapshot\n    if (isCheckpoint) {\n        logger.debug('Creating checkpoint snapshot:', { description });\n        return {\n            type: 'full',\n            snapshot: { ...after },\n            timestamp,\n            description\n        };\n    }\n    const changes = {};\n    // Compare tracks\n    if (before.tracks !== after.tracks) {\n        changes.tracks = {\n            added: after.tracks?.filter(track => !before.tracks?.find(t => t.id === track.id)) || [],\n            removed: (before.tracks || [])\n                .filter(track => !after.tracks?.find(t => t.id === track.id))\n                .map(track => track.id),\n            modified: (before.tracks || [])\n                .filter(track => after.tracks?.find(t => t.id === track.id))\n                .map(track => {\n                const afterTrack = after.tracks.find(t => t.id === track.id);\n                const clipChanges = {\n                    added: afterTrack.clips.filter(clip => !track.clips.find(c => c.id === clip.id)),\n                    removed: track.clips\n                        .filter(clip => !afterTrack.clips.find(c => c.id === clip.id))\n                        .map(clip => clip.id),\n                    modified: track.clips\n                        .filter(clip => afterTrack.clips.find(c => c.id === clip.id))\n                        .map(clip => {\n                        const afterClip = afterTrack.clips.find(c => c.id === clip.id);\n                        return {\n                            id: clip.id,\n                            before: getDiffProperties(clip, afterClip),\n                            after: getDiffProperties(afterClip, clip)\n                        };\n                    })\n                        .filter(diff => Object.keys(diff.before).length > 0 ||\n                        Object.keys(diff.after).length > 0)\n                };\n                return {\n                    id: track.id,\n                    clips: clipChanges\n                };\n            })\n                .filter(trackDiff => trackDiff.clips.added?.length ||\n                trackDiff.clips.removed?.length ||\n                trackDiff.clips.modified?.length)\n        };\n    }\n    // Compare scalar properties\n    if (before.currentTime !== after.currentTime)\n        changes.currentTime = after.currentTime;\n    if (before.duration !== after.duration)\n        changes.duration = after.duration;\n    if (before.zoom !== after.zoom)\n        changes.zoom = after.zoom;\n    if (before.fps !== after.fps)\n        changes.fps = after.fps;\n    // Compare markers\n    if (before.markers !== after.markers) {\n        changes.markers = {\n            added: after.markers.filter(marker => !before.markers.find(m => m.id === marker.id)),\n            removed: before.markers\n                .filter(marker => !after.markers.find(m => m.id === marker.id))\n                .map(marker => marker.id),\n            modified: before.markers\n                .filter(marker => after.markers.find(m => m.id === marker.id))\n                .map(marker => {\n                const afterMarker = after.markers.find(m => m.id === marker.id);\n                return {\n                    id: marker.id,\n                    before: {\n                        time: marker.time,\n                        label: marker.label\n                    },\n                    after: {\n                        time: afterMarker.time,\n                        label: afterMarker.label\n                    }\n                };\n            })\n                .filter(diff => diff.before.time !== diff.after.time ||\n                diff.before.label !== diff.after.label)\n        };\n    }\n    return {\n        type: 'partial',\n        changes,\n        timestamp,\n        description\n    };\n};\nexport const applyStateDiff = (state, diff, reverse = false) => {\n    // For checkpoint diffs, directly use the snapshot\n    if (diff.type === 'full' && diff.snapshot) {\n        logger.debug('Restoring from checkpoint:', { description: diff.description });\n        if (reverse) {\n            return state; // Keep current state when undoing a checkpoint\n        }\n        return { ...diff.snapshot };\n    }\n    if (!diff.changes) {\n        logger.warn('Invalid diff: no changes or snapshot found');\n        return state;\n    }\n    const newState = { ...state };\n    // Apply track changes\n    if (diff.changes.tracks) {\n        const tracks = [...state.tracks];\n        const { added, removed, modified } = diff.changes.tracks;\n        if (reverse) {\n            // Remove added tracks\n            if (added) {\n                const addedIds = new Set(added.map(track => track.id));\n                newState.tracks = tracks.filter(track => !addedIds.has(track.id));\n            }\n            // Restore removed tracks\n            if (removed) {\n                const removedTracks = tracks.filter(track => removed.includes(track.id));\n                newState.tracks = [...newState.tracks, ...removedTracks];\n            }\n        }\n        else {\n            // Add new tracks\n            if (added)\n                newState.tracks = [...tracks, ...added];\n            // Remove tracks\n            if (removed) {\n                const removedIds = new Set(removed);\n                newState.tracks = tracks.filter(track => !removedIds.has(track.id));\n            }\n        }\n        // Apply track modifications\n        if (modified) {\n            modified.forEach(trackDiff => {\n                const track = newState.tracks.find(t => t.id === trackDiff.id);\n                if (!track)\n                    return;\n                const clips = [...track.clips];\n                const { added: addedClips, removed: removedClips, modified: modifiedClips } = trackDiff.clips;\n                if (reverse) {\n                    // When reversing, first restore removed clips, then remove added ones\n                    if (reverse) {\n                        // First restore removed clips\n                        if (removedClips) {\n                            const removedClipsList = clips.filter(clip => removedClips.includes(clip.id));\n                            track.clips = [...track.clips, ...removedClipsList];\n                        }\n                        // Then remove added clips\n                        if (addedClips) {\n                            const addedIds = new Set(addedClips.map(clip => clip.id));\n                            track.clips = track.clips.filter(clip => !addedIds.has(clip.id));\n                        }\n                    }\n                    else {\n                        // When going forward, first remove clips, then add new ones\n                        if (removedClips) {\n                            const removedIds = new Set(removedClips);\n                            track.clips = track.clips.filter(clip => !removedIds.has(clip.id));\n                        }\n                        if (addedClips) {\n                            track.clips = [...track.clips, ...addedClips];\n                        }\n                    }\n                }\n                else {\n                }\n                // Apply clip modifications\n                if (modifiedClips) {\n                    modifiedClips.forEach(clipDiff => {\n                        const clip = track.clips.find(c => c.id === clipDiff.id);\n                        if (!clip)\n                            return;\n                        if (reverse) {\n                            // Deep clone to preserve nested objects\n                            clip.startTime = clipDiff.before.startTime ?? clip.startTime;\n                            clip.endTime = clipDiff.before.endTime ?? clip.endTime;\n                            clip.mediaOffset = clipDiff.before.mediaOffset ?? clip.mediaOffset;\n                            clip.mediaDuration = clipDiff.before.mediaDuration ?? clip.mediaDuration;\n                            if (clipDiff.before.initialBounds) {\n                                clip.initialBounds = { ...clipDiff.before.initialBounds };\n                            }\n                            if (clipDiff.before.handles) {\n                                clip.handles = { ...clipDiff.before.handles };\n                            }\n                        }\n                        else {\n                            clip.startTime = clipDiff.after.startTime ?? clip.startTime;\n                            clip.endTime = clipDiff.after.endTime ?? clip.endTime;\n                            clip.mediaOffset = clipDiff.after.mediaOffset ?? clip.mediaOffset;\n                            clip.mediaDuration = clipDiff.after.mediaDuration ?? clip.mediaDuration;\n                            if (clipDiff.after.initialBounds) {\n                                clip.initialBounds = { ...clipDiff.after.initialBounds };\n                            }\n                            if (clipDiff.after.handles) {\n                                clip.handles = { ...clipDiff.after.handles };\n                            }\n                        }\n                    });\n                }\n            });\n        }\n    }\n    // Store previous values in the diff for scalar properties\n    const previousValues = {\n        currentTime: state.currentTime,\n        duration: state.duration,\n        zoom: state.zoom,\n        fps: state.fps\n    };\n    // Apply scalar changes\n    if (reverse) {\n        if (diff.changes.currentTime !== undefined)\n            newState.currentTime = previousValues.currentTime;\n        if (diff.changes.duration !== undefined)\n            newState.duration = previousValues.duration;\n        if (diff.changes.zoom !== undefined)\n            newState.zoom = previousValues.zoom;\n        if (diff.changes.fps !== undefined)\n            newState.fps = previousValues.fps;\n    }\n    else {\n        if (diff.changes.currentTime !== undefined)\n            newState.currentTime = diff.changes.currentTime;\n        if (diff.changes.duration !== undefined)\n            newState.duration = diff.changes.duration;\n        if (diff.changes.zoom !== undefined)\n            newState.zoom = diff.changes.zoom;\n        if (diff.changes.fps !== undefined)\n            newState.fps = diff.changes.fps;\n    }\n    // Apply marker changes\n    if (diff.changes.markers) {\n        const markers = [...state.markers];\n        const { added, removed, modified } = diff.changes.markers;\n        if (reverse) {\n            // Remove added markers\n            if (added) {\n                const addedIds = new Set(added.map(marker => marker.id));\n                newState.markers = markers.filter(marker => !addedIds.has(marker.id));\n            }\n            // Restore removed markers\n            if (removed) {\n                const removedMarkers = markers.filter(marker => removed.includes(marker.id));\n                newState.markers = [...newState.markers, ...removedMarkers];\n            }\n        }\n        else {\n            // Add new markers\n            if (added)\n                newState.markers = [...markers, ...added];\n            // Remove markers\n            if (removed) {\n                const removedIds = new Set(removed);\n                newState.markers = markers.filter(marker => !removedIds.has(marker.id));\n            }\n        }\n        // Apply marker modifications\n        if (modified) {\n            modified.forEach(markerDiff => {\n                const marker = newState.markers.find(m => m.id === markerDiff.id);\n                if (!marker)\n                    return;\n                if (reverse) {\n                    marker.time = markerDiff.before.time;\n                    marker.label = markerDiff.before.label;\n                }\n                else {\n                    marker.time = markerDiff.after.time;\n                    marker.label = markerDiff.after.label;\n                }\n            });\n        }\n    }\n    return newState;\n};\nconst getDiffProperties = (obj1, obj2) => {\n    const diff = {};\n    for (const key in obj1) {\n        if (obj1[key] !== obj2[key]) {\n            diff[key] = obj1[key];\n        }\n    }\n    return diff;\n};\n","__webpack_require__.h = () => (\"484fa763e08d34b5b45e\")"],"names":[],"sourceRoot":""}