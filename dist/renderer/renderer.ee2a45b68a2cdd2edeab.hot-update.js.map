{"version":3,"file":"renderer.ee2a45b68a2cdd2edeab.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACA;AACA;AACA;AACP;AACA;AACA,CAAC;AACM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,CAAC;AACM;AACP;AACA;AACA;AACA;AACA;AACA,gCAAgC,WAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,KAAK;AAC3D;AACA;;;;;;;;;UC1KA","sources":["webpack://remotion-editor/./src/renderer/types/timeline.ts","webpack://remotion-editor/webpack/runtime/getFullHash"],"sourcesContent":["export const ActionTypes = {\n    // Timeline state\n    SET_STATE: 'SET_STATE',\n    CLEAR_STATE: 'CLEAR_STATE',\n    SET_CURRENT_TIME: 'SET_CURRENT_TIME',\n    SET_DURATION: 'SET_DURATION',\n    SET_ZOOM: 'SET_ZOOM',\n    SET_FPS: 'SET_FPS',\n    SET_IS_PLAYING: 'SET_IS_PLAYING',\n    SET_IS_DRAGGING: 'SET_IS_DRAGGING',\n    SET_SCROLL_X: 'SET_SCROLL_X',\n    SET_SCROLL_Y: 'SET_SCROLL_Y',\n    SET_ERROR: 'SET_ERROR',\n    SET_SNAPPING: 'SET_SNAPPING',\n    // Selection\n    SET_SELECTED_CLIP_IDS: 'SET_SELECTED_CLIP_IDS',\n    SET_SELECTED_TRACK_ID: 'SET_SELECTED_TRACK_ID',\n    SELECT_TRACK: 'SELECT_TRACK',\n    SELECT_CLIPS: 'SELECT_CLIPS',\n    SELECT_CAPTIONS: 'SELECT_CAPTIONS',\n    // Tracks\n    SET_TRACKS: 'SET_TRACKS',\n    ADD_TRACK: 'ADD_TRACK',\n    UPDATE_TRACK: 'UPDATE_TRACK',\n    REMOVE_TRACK: 'REMOVE_TRACK',\n    MOVE_TRACK: 'MOVE_TRACK',\n    // Clips\n    ADD_CLIP: 'ADD_CLIP',\n    UPDATE_CLIP: 'UPDATE_CLIP',\n    REMOVE_CLIP: 'REMOVE_CLIP',\n    MOVE_CLIP: 'MOVE_CLIP',\n    SPLIT_CLIP: 'SPLIT_CLIP',\n    TRIM_CLIP: 'TRIM_CLIP',\n    // Effects and Transitions\n    ADD_EFFECT: 'ADD_EFFECT',\n    UPDATE_EFFECT: 'UPDATE_EFFECT',\n    REMOVE_EFFECT: 'REMOVE_EFFECT',\n    ADD_TRANSITION: 'ADD_TRANSITION',\n    UPDATE_TRANSITION: 'UPDATE_TRANSITION',\n    REMOVE_TRANSITION: 'REMOVE_TRANSITION',\n    // Markers\n    SET_MARKERS: 'SET_MARKERS',\n    ADD_MARKER: 'ADD_MARKER',\n    UPDATE_MARKER: 'UPDATE_MARKER',\n    REMOVE_MARKER: 'REMOVE_MARKER',\n    // History\n    PUSH_HISTORY: 'PUSH_HISTORY',\n    SET_HISTORY_INDEX: 'SET_HISTORY_INDEX',\n    CLEAR_HISTORY: 'CLEAR_HISTORY',\n    UNDO: 'UNDO',\n    REDO: 'REDO',\n    RESTORE_SNAPSHOT: 'RESTORE_SNAPSHOT',\n    // UI State\n    SET_PLAYING: 'SET_PLAYING',\n    SET_DRAGGING: 'SET_DRAGGING',\n    SET_SHOW_WAVEFORMS: 'SET_SHOW_WAVEFORMS',\n    SET_SHOW_KEYFRAMES: 'SET_SHOW_KEYFRAMES',\n    SET_SHOW_TRANSITIONS: 'SET_SHOW_TRANSITIONS',\n    SET_SHOW_EFFECTS: 'SET_SHOW_EFFECTS',\n    SET_RENDER_QUALITY: 'SET_RENDER_QUALITY',\n    UPDATE_CAPTION_STYLES: 'UPDATE_CAPTION_STYLES'\n};\nexport const isVideoClip = (clip) => clip.type === 'video';\nexport const isAudioClip = (clip) => clip.type === 'audio';\nexport const isCaptionClip = (clip) => clip.type === 'caption';\nexport const isMediaClip = (clip) => clip.type === 'video' || clip.type === 'audio' || clip.type === 'caption';\nexport const getMediaBounds = (clip) => ({\n    offset: clip.mediaOffset,\n    duration: clip.mediaDuration\n});\nexport const initialTimelineState = {\n    tracks: [],\n    currentTime: 0,\n    duration: 0,\n    zoom: 1,\n    fps: 30,\n    isPlaying: false,\n    isDragging: false,\n    scrollX: 0,\n    scrollY: 0,\n    scrollLeft: 0,\n    selectedClipIds: [],\n    selectedCaptionIds: [],\n    selectedTrackId: undefined,\n    markers: [],\n    dragStartX: undefined,\n    dragStartY: undefined,\n    error: undefined,\n    history: {\n        entries: [],\n        currentIndex: -1\n    },\n    aspectRatio: '16:9',\n    snapToGrid: true,\n    gridSize: 10,\n    showWaveforms: true,\n    showKeyframes: true,\n    showTransitions: true,\n    showEffects: true,\n    renderQuality: 'preview',\n    isSnappingEnabled: true,\n    rippleState: {}\n};\nexport const createUpdateClipTransformAction = (trackId, clipId, transform) => ({\n    type: ActionTypes.UPDATE_CLIP,\n    payload: {\n        trackId,\n        clipId,\n        clip: { transform }\n    }\n});\nexport const createClip = (type, props) => {\n    const duration = props.endTime - props.startTime;\n    const mediaDuration = props.mediaDuration || duration;\n    const initialDuration = props.initialDuration || duration;\n    const mediaOffset = props.mediaOffset || 0;\n    const baseClip = {\n        id: props.id || `clip-${Date.now()}`,\n        name: props.name || 'Untitled Clip',\n        startTime: props.startTime,\n        endTime: props.endTime,\n        mediaOffset,\n        mediaDuration,\n        originalDuration: props.originalDuration || mediaDuration,\n        initialDuration,\n        maxDuration: initialDuration,\n        initialBounds: {\n            startTime: props.startTime,\n            endTime: props.endTime,\n            mediaOffset,\n            mediaDuration\n        },\n        handles: {\n            startPosition: mediaOffset,\n            endPosition: mediaOffset + (props.endTime - props.startTime)\n        },\n        effects: props.effects || [],\n        thumbnail: props.thumbnail\n    };\n    switch (type) {\n        case 'video':\n            return {\n                ...baseClip,\n                type: 'video',\n                src: props.src || '',\n                transform: props.transform || {\n                    scale: 1,\n                    rotation: 0,\n                    position: { x: 0, y: 0 },\n                    opacity: 1\n                }\n            };\n        case 'audio':\n            return {\n                ...baseClip,\n                type: 'audio',\n                src: props.src || '',\n                volume: props.volume || 1,\n                isMuted: props.isMuted || false\n            };\n        case 'caption':\n            return {\n                ...baseClip,\n                type: 'caption',\n                text: props.text || '',\n                captions: props.captions || []\n            };\n        default:\n            throw new Error(`Unsupported clip type: ${type}`);\n    }\n};\n","__webpack_require__.h = () => (\"a8cfa58b49d5d9fc73ed\")"],"names":[],"sourceRoot":""}