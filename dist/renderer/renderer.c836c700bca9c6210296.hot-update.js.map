{"version":3,"file":"renderer.c836c700bca9c6210296.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAgF;AACvC;AACzC,wBAAwB,oDAAa;AAC9B,4BAA4B,UAAU;AAC7C,8BAA8B,+CAAQ;AACtC,4CAA4C,+CAAQ;AACpD,qBAAqB,kDAAW;AAChC,QAAQ,iDAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT,KAAK;AACL,uBAAuB,kDAAW;AAClC,QAAQ,iDAAM;AACd;AACA;AACA,KAAK;AACL,uBAAuB,kDAAW;AAClC,QAAQ,iDAAM;AACd;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sDAAe;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,sDAAe;AACnB,YAAY,IAAyE;AACrF;AACA;AACA,KAAK;AACL,YAAY,0DAAmB,6BAA6B,cAAc;AAC1E;AACO;AACP,oBAAoB,iDAAU;AAC9B;AACA;AACA;AACA;AACA;;;;;;;;;UCxEA","sources":["webpack://remotion-editor/./src/renderer/contexts/MediaBinContext.tsx","webpack://remotion-editor/webpack/runtime/getFullHash"],"sourcesContent":["import React, { createContext, useContext, useCallback, useState } from 'react';\nimport { logger } from '../utils/logger';\nconst MediaBinContext = createContext(undefined);\nexport const MediaBinProvider = ({ children }) => {\n    const [items, setItems] = useState([]);\n    const [selectedItem, setSelectedItem] = useState(null);\n    const addItems = useCallback((newItems) => {\n        logger.debug('Adding media items:', newItems);\n        setItems(current => {\n            const updatedItems = [...current, ...newItems];\n            // Sync with timeline state\n            if (window.timelineDispatch) {\n                window.timelineDispatch({\n                    type: 'SET_STATE',\n                    payload: {\n                        ...window.timelineState,\n                        mediaBin: {\n                            ...(window.timelineState?.mediaBin || {}),\n                            items: updatedItems\n                        }\n                    }\n                });\n            }\n            return updatedItems;\n        });\n    }, []);\n    const removeItem = useCallback((id) => {\n        logger.debug('Removing media item:', id);\n        setItems(current => current.filter(item => item.id !== id));\n        setSelectedItem(current => current?.id === id ? null : current);\n    }, []);\n    const selectItem = useCallback((item) => {\n        logger.debug('Selecting media item:', item);\n        setSelectedItem(item);\n    }, []);\n    const value = {\n        items,\n        selectedItem,\n        addItems,\n        removeItem,\n        selectItem\n    };\n    // Listen for timeline state changes\n    React.useEffect(() => {\n        const handleTimelineStateChange = () => {\n            const timelineState = window.timelineState;\n            if (timelineState?.mediaBin?.items) {\n                setItems(timelineState.mediaBin.items);\n            }\n        };\n        // Initial sync\n        handleTimelineStateChange();\n        // Listen for state changes\n        window.addEventListener('timeline-state-change', handleTimelineStateChange);\n        return () => {\n            window.removeEventListener('timeline-state-change', handleTimelineStateChange);\n        };\n    }, []);\n    // Expose context for testing\n    React.useEffect(() => {\n        if (process.env.NODE_ENV === 'test' || process.env.NODE_ENV === 'development') {\n            window.mediaBinContext = value;\n        }\n    }, [value]);\n    return (React.createElement(MediaBinContext.Provider, { value: value }, children));\n};\nexport const useMediaBin = () => {\n    const context = useContext(MediaBinContext);\n    if (!context) {\n        throw new Error('useMediaBin must be used within a MediaBinProvider');\n    }\n    return context;\n};\n","__webpack_require__.h = () => (\"e88de86d9535d7da008a\")"],"names":[],"sourceRoot":""}