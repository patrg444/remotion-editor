{"version":3,"file":"renderer.9a21d1870f39d2d3c11d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAsD;AACb;AACiB;AACK;AAC/D;AACA,YAAY,gIAAgI;AAC5I,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,4BAA4B,kDAAW;AACvC;AACA,QAAQ,iDAAM;AACd;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,uBAAuB,kDAAW;AAClC;AACA,oBAAoB;AACpB,QAAQ,iDAAM;AACd;AACA;AACA,SAAS;AACT,KAAK;AACL,0BAA0B,kDAAW;AACrC;AACA;AACA,qCAAqC,uEAAiB,oCAAoC,uEAAiB;AAC3G,QAAQ,iDAAM;AACd;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,UAAU,kCAAkC,KAAK;AAChF;AACA;AACA;AACA,SAAS;AACT,qBAAqB,eAAe;AACpC,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,QAAQ,0DAAmB,UAAU,wLAAwL;AAC7N,QAAQ,0DAAmB,UAAU,0CAA0C;AAC/E,YAAY,0DAAmB,CAAC,mEAAkB,IAAI;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB,yCAAyC;AAC1D,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E,QAAQ,0DAAmB,UAAU,yLAAyL;AAC9N;AACO,2BAA2B,iDAAU;;;;;;;;;UC7G5C","sources":["webpack://remotion-editor/./src/renderer/components/TimelineTransition.tsx","webpack://remotion-editor/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport { logger } from '../utils/logger';\nimport { TransitionRenderer } from './TransitionRenderer';\nimport { TimelineConstants } from '../utils/timelineConstants';\nconst TimelineTransitionComponent = (props) => {\n    const { id, type, startTime, endTime, duration, clipAId, clipBId, clipAThumbnail, clipBThumbnail, direction, params, onDurationChange } = props;\n    useEffect(() => {\n        console.log('TimelineTransition mounted:', {\n            id,\n            type,\n            startTime,\n            endTime,\n            duration,\n            clipAId,\n            clipBId,\n            direction,\n            params\n        });\n    }, [id, type, startTime, endTime, duration, clipAId, clipBId, direction, params]);\n    const handleDragStart = useCallback((e) => {\n        e.stopPropagation();\n        logger.debug('Starting transition handle drag:', {\n            id,\n            type,\n            startTime,\n            endTime,\n            duration\n        });\n    }, [id, type, startTime, endTime, duration]);\n    const handleDrag = useCallback((e) => {\n        if (!e.clientX)\n            return; // Ignore invalid drag events\n        logger.debug('Dragging transition handle:', {\n            clientX: e.clientX,\n            duration\n        });\n    }, [duration]);\n    const handleDragEnd = useCallback((e) => {\n        if (!e.clientX)\n            return;\n        const newDuration = Math.max(TimelineConstants.Transitions.MIN_DURATION, Math.min(TimelineConstants.Transitions.MAX_DURATION, duration + (e.clientX - e.currentTarget.getBoundingClientRect().left) / 100));\n        logger.debug('Ending transition handle drag:', {\n            id,\n            oldDuration: duration,\n            newDuration\n        });\n        onDurationChange(newDuration);\n    }, [id, duration, onDurationChange]);\n    const getTransitionIcon = () => {\n        switch (type) {\n            case 'dissolve':\n            case 'crossfade':\n                return '↔️';\n            case 'fade':\n                return '🌅';\n            case 'wipe':\n                return '➡️';\n            case 'slide':\n                return '⏩';\n            case 'zoom':\n                return '🔍';\n            case 'push':\n                return '👉';\n            default:\n                return '↔️';\n        }\n    };\n    return (React.createElement(\"div\", { className: `timeline-transition ${type}`, \"data-testid\": \"timeline-transition\", \"data-transition-id\": id, \"data-type\": type, \"data-direction\": direction || params?.direction || 'right', \"data-params\": JSON.stringify({\n            ...params,\n            direction: direction || params?.direction || 'right',\n            duration: params?.duration || duration\n        }), \"data-duration\": duration.toString(), style: {\n            left: `${startTime * 50}px`,\n            width: `${(endTime - startTime) * 50}px`,\n            top: '50%',\n            transform: 'translateY(-50%)',\n            position: 'absolute',\n            height: '20px',\n            backgroundColor: 'rgba(0, 123, 255, 0.3)',\n            border: '1px solid rgba(0, 123, 255, 0.5)',\n            borderRadius: '4px',\n            zIndex: 100,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n        } },\n        React.createElement(\"div\", { className: \"timeline-transition-handle left\", \"data-testid\": \"timeline-transition-handle\", draggable: true, onDragStart: handleDragStart, onDrag: handleDrag, onDragEnd: handleDragEnd }),\n        React.createElement(\"div\", { className: \"timeline-transition-preview\" },\n            React.createElement(TransitionRenderer, { transition: {\n                    id,\n                    type: type,\n                    duration: Number(duration),\n                    clipAId,\n                    clipBId,\n                    params: params || {}\n                }, fromClip: {\n                    id: clipAId,\n                    thumbnail: clipAThumbnail || '/test.webm',\n                    duration: 2,\n                    startTime: startTime\n                }, toClip: {\n                    id: clipBId,\n                    thumbnail: clipBThumbnail || '/test.webm',\n                    duration: 2,\n                    startTime: endTime - duration\n                }, progress: 0.5, width: 200, height: 20 })),\n        React.createElement(\"div\", { className: \"timeline-transition-icon\" }, getTransitionIcon()),\n        React.createElement(\"div\", { className: \"timeline-transition-handle right\", \"data-testid\": \"timeline-transition-handle\", draggable: true, onDragStart: handleDragStart, onDrag: handleDrag, onDragEnd: handleDragEnd })));\n};\nexport const TimelineTransition = React.memo(TimelineTransitionComponent);\n","__webpack_require__.h = () => (\"85a757d4cb035731e283\")"],"names":[],"sourceRoot":""}