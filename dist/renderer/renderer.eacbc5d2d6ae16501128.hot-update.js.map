{"version":3,"file":"renderer.eacbc5d2d6ae16501128.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAwE;AAClC;AAC2B;AACjB;AACe;AACtB;AAClC;AACP,YAAY,kBAAkB,EAAE,6EAAkB;AAClD,yBAAyB,6CAAM;AAC/B,gDAAgD,+CAAQ;AACxD;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,yBAAyB,kDAAW;AACpC;AACA,kBAAkB,wDAAW;AAC7B;AACA,SAAS;AACT;AACA,kBAAkB,wDAAW;AAC7B;AACA,SAAS;AACT,QAAQ,iDAAM,+BAA+B,uBAAuB;AACpE,KAAK;AACL;AACA,6BAA6B,kDAAW;AACxC;AACA;AACA,kBAAkB,wDAAW;AAC7B,uBAAuB;AACvB,SAAS;AACT,QAAQ,iDAAM;AACd,KAAK;AACL,2BAA2B,kDAAW;AACtC;AACA,kBAAkB,wDAAW;AAC7B;AACA;AACA,iCAAiC,WAAW;AAC5C,mCAAmC,wBAAwB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,YAAY,0DAAmB,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,iDAAM;AAClB;AACA;AACA;AACA,uBAAuB,uEAAiB;AACxC,aAAa;AACb,WAAW;AACX,QAAQ,0DAAmB,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,YAAY,0DAAmB,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,QAAQ,0DAAmB,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,YAAY,0DAAmB,CAAC,+CAAQ,IAAI,sIAAsI;AAClL,0CAA0C,0DAAmB,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;;;UC7HA","sources":["webpack://remotion-editor/./src/renderer/components/TimelineContainer.tsx","webpack://remotion-editor/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useCallback, useEffect, useState, useRef } from 'react';\nimport { Timeline } from './Timeline';\nimport { useTimelineContext } from '../hooks/useTimelineContext';\nimport { ActionTypes } from '../types/timeline';\nimport { TimelineConstants } from '../utils/timelineConstants';\nimport { logger } from '../utils/logger';\nexport const TimelineContainer = () => {\n    const { state, dispatch } = useTimelineContext();\n    const containerRef = useRef(null);\n    const [containerWidth, setContainerWidth] = useState(0);\n    // Update container width on resize\n    useEffect(() => {\n        const updateWidth = () => {\n            if (containerRef.current) {\n                const rect = containerRef.current.getBoundingClientRect();\n                setContainerWidth(rect.width);\n            }\n        };\n        updateWidth();\n        const resizeObserver = new ResizeObserver(updateWidth);\n        if (containerRef.current) {\n            resizeObserver.observe(containerRef.current);\n        }\n        window.addEventListener('resize', updateWidth);\n        return () => {\n            window.removeEventListener('resize', updateWidth);\n            resizeObserver.disconnect();\n        };\n    }, []);\n    // Handle scroll events\n    const handleScroll = useCallback((scrollLeft, scrollTop) => {\n        dispatch({\n            type: ActionTypes.SET_SCROLL_X,\n            payload: scrollLeft\n        });\n        dispatch({\n            type: ActionTypes.SET_SCROLL_Y,\n            payload: scrollTop\n        });\n        logger.debug('Timeline scrolled:', { scrollLeft, scrollTop });\n    }, [dispatch]);\n    // Handle time updates\n    const handleTimeUpdate = useCallback((time) => {\n        console.log('Time update in container:', time);\n        dispatch({\n            type: ActionTypes.SET_CURRENT_TIME,\n            payload: { time }\n        });\n        logger.debug('Timeline time updated:', time);\n    }, [dispatch]);\n    const handleAddTrack = useCallback(() => {\n        dispatch({\n            type: ActionTypes.ADD_TRACK,\n            payload: {\n                track: {\n                    id: `track-${Date.now()}`,\n                    name: `Track ${state.tracks.length + 1}`,\n                    type: 'video',\n                    clips: [],\n                    isLocked: false,\n                    isVisible: true\n                }\n            }\n        });\n    }, [dispatch, state.tracks.length]);\n    return (React.createElement(\"div\", { ref: containerRef, className: \"timeline-container\", \"data-testid\": \"timeline-container\", style: {\n            position: 'relative',\n            width: '100%',\n            height: '100%',\n            overflowX: 'hidden',\n            overflowY: 'hidden',\n            userSelect: 'none',\n            touchAction: 'none',\n            backgroundColor: '#1a1a1a',\n            transform: 'translate3d(0, 0, 0)',\n            willChange: 'transform'\n        }, onMouseMove: (e) => {\n            // Log container mouse coordinates for debugging\n            logger.debug('Container mouse move:', {\n                clientX: e.clientX,\n                offsetX: e.nativeEvent.offsetX,\n                zoom: state.zoom,\n                scale: TimelineConstants.Scale.getScale(state.zoom)\n            });\n        } },\n        React.createElement(\"div\", { className: \"timeline-toolbar\", style: {\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                right: 0,\n                zIndex: 1000,\n                padding: '8px',\n                backgroundColor: '#2a2a2a'\n            } },\n            React.createElement(\"button\", { \"data-testid\": \"add-track-button\", onClick: handleAddTrack, className: \"add-track-button\", style: {\n                    padding: '4px 8px',\n                    backgroundColor: '#3a3a3a',\n                    border: 'none',\n                    borderRadius: '4px',\n                    color: '#fff',\n                    cursor: 'pointer'\n                } }, \"Add Track\")),\n        React.createElement(\"div\", { className: \"timeline-content-wrapper\", style: {\n                position: 'absolute',\n                top: 46,\n                left: 0,\n                right: 0,\n                bottom: 0,\n                overflowX: 'scroll',\n                overflowY: 'hidden',\n                WebkitOverflowScrolling: 'touch'\n            } },\n            React.createElement(Timeline, { containerWidth: Math.max(0, containerWidth - 200), scrollLeft: state.scrollX, onScroll: handleScroll, onTimeUpdate: handleTimeUpdate }),\n            state.tracks.length === 0 && (React.createElement(\"div\", { className: \"timeline-empty-state\", \"data-testid\": \"empty-state\", style: {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    color: '#666',\n                    pointerEvents: 'none'\n                } }, \"No tracks to display\")))));\n};\n","__webpack_require__.h = () => (\"67b172a95aa7a5f22ef2\")"],"names":[],"sourceRoot":""}