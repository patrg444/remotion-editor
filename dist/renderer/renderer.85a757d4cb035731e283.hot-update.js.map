{"version":3,"file":"renderer.85a757d4cb035731e283.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAgE;AACD;AACtB;AACiB;AACzB;AACjC,8BAA8B,wCAAwC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iDAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,UAAU,4NAA4N;AACrQ,QAAQ,0DAAmB,UAAU,oCAAoC,oBAAoB,0DAAmB,UAAU,qCAAqC,MAAM,0DAAmB,UAAU,sCAAsC;AACxO,QAAQ,0DAAmB,UAAU,+BAA+B;AACpE,YAAY,0DAAmB,UAAU,+BAA+B;AACxE,YAAY,0DAAmB,UAAU,mCAAmC;AAC5E;AACA,oBAAoB,iBAAiB;AACrC,YAAY,gEAAgE,EAAE,sEAAW;AACzF,wCAAwC,+CAAQ;AAChD,4CAA4C,+CAAQ;AACpD,YAAY,4BAA4B,EAAE,2EAAiB;AAC3D,uBAAuB,mDAAY;AACnC,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL,sBAAsB,kDAAW;AACjC;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC,KAAK;AACL,mCAAmC,kDAAW;AAC9C;AACA;AACA,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iDAAM;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB,kDAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,4BAA4B,kDAAW;AACvC;AACA;AACA;AACA,KAAK;AACL,2BAA2B,kDAAW;AACtC;AACA;AACA;AACA,KAAK;AACL,4BAA4B,kDAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,uBAAuB,kDAAW;AAClC;AACA;AACA;AACA;AACA,KAAK;AACL,6BAA6B,kDAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY,0DAAmB,UAAU,wBAAwB,WAAW,EAAE,8BAA8B,2IAA2I;AACvP,yBAAyB,0DAAmB,UAAU,6EAA6E;AACnI,QAAQ,0DAAmB,UAAU,+BAA+B;AACpE,YAAY,0DAAmB;AAC/B,YAAY,0DAAmB,aAAa,uJAAuJ;AACnM,QAAQ,0DAAmB,YAAY,sFAAsF,iBAAiB,2FAA2F;AACzO,QAAQ,0DAAmB,UAAU,oEAAoE,sBAAsB,0DAAmB,UAAU,8BAA8B,uBAAuB,0DAAmB,uBAAuB;AAC3P,gBAAgB,iDAAM;AACtB,aAAa;AACb,gBAAgB,iDAAM;AACtB,aAAa,uCAAuC,SAAS,0DAAmB,UAAU,gEAAgE;AAC1J,YAAY,0DAAmB;AAC/B,YAAY,0DAAmB;AAC/B;AACA;AACA;AACA;AACA,cAAc,QAAQ,GAAG,6CAA6C;AACtE;AACA,iEAAe,QAAQ,EAAC;;;;;;;;;UCjLxB","sources":["webpack://remotion-editor/./src/renderer/components/MediaBin.tsx","webpack://remotion-editor/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { useFileOperations } from '../hooks/useFileOperations';\nimport { logger } from '../utils/logger';\nimport { useMediaBin } from '../contexts/MediaBinContext';\nimport '../styles/media-bin.css';\nconst MediaItemComponent = ({ item, onDragStart, onDragEnd, onClick, }) => {\n    const handleDragStart = (e) => {\n        if (e.dataTransfer) {\n            try {\n                const data = {\n                    type: item.type,\n                    name: item.name,\n                    path: item.path,\n                    src: item.path,\n                    duration: item.duration,\n                    originalDuration: item.duration,\n                    initialDuration: item.duration,\n                    maxDuration: item.duration\n                };\n                logger.debug('Starting drag with data:', data);\n                e.dataTransfer.setData('application/json', JSON.stringify(data));\n                e.dataTransfer.effectAllowed = 'copy';\n                e.currentTarget.classList.add('dragging');\n                onDragStart(item);\n            }\n            catch (error) {\n                console.error('Error setting drag data:', error);\n            }\n        }\n    };\n    const handleDragEnd = (e) => {\n        e.currentTarget.classList.remove('dragging');\n        onDragEnd();\n    };\n    return (React.createElement(\"div\", { className: \"media-asset-item\", draggable: \"true\", onDragStart: handleDragStart, onDragEnd: handleDragEnd, onClick: () => onClick?.(item), \"data-testid\": \"media-bin-item\", \"data-item-id\": item.id, \"data-type\": item.type },\n        React.createElement(\"div\", { className: \"media-asset-thumbnail\" }, item.thumbnail ? (React.createElement(\"img\", { src: item.thumbnail, alt: item.name })) : (React.createElement(\"div\", { className: \"media-asset-placeholder\" }, item.type === 'video' ? '🎥' : item.type === 'audio' ? '🔊' : '🖼️'))),\n        React.createElement(\"div\", { className: \"media-asset-info\" },\n            React.createElement(\"div\", { className: \"media-asset-name\" }, item.name),\n            React.createElement(\"div\", { className: \"media-asset-duration\" }, item.duration ? formatDuration(item.duration) : ''))));\n};\nconst MediaBin = ({ className = '', }) => {\n    const { items, selectedItem, addItems: onImport, selectItem: onSelect } = useMediaBin();\n    const [isDragOver, setIsDragOver] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const { validateFile, processFile } = useFileOperations();\n    const objectUrls = React.useRef([]);\n    useEffect(() => {\n        const urls = objectUrls.current;\n        return () => {\n            urls.forEach(url => {\n                try {\n                    URL.revokeObjectURL(url);\n                }\n                catch (error) {\n                    console.error('Error revoking object URL:', error);\n                }\n            });\n        };\n    }, []);\n    const showError = useCallback((text) => {\n        if (errorMessage?.timeout) {\n            clearTimeout(errorMessage.timeout);\n        }\n        const timeout = setTimeout(() => setErrorMessage(null), 3000);\n        setErrorMessage({ text, timeout });\n    }, [errorMessage]);\n    const validateAndProcessFile = useCallback(async (file) => {\n        // Check for duplicates first\n        if (items.some(item => item.name === file.name)) {\n            showError(`${file.name} has already been imported`);\n            return null;\n        }\n        // Then validate file\n        try {\n            await validateFile(file);\n        }\n        catch (error) {\n            showError(error instanceof Error ? error.message : 'Error validating file');\n            return null;\n        }\n        // Process file\n        try {\n            const processedFile = await processFile(file);\n            const objectUrl = URL.createObjectURL(file);\n            objectUrls.current.push(objectUrl);\n            const type = processedFile.type.startsWith('video/') ? 'video' :\n                processedFile.type.startsWith('audio/') ? 'audio' :\n                    'image';\n            logger.debug('Processed file:', {\n                id: processedFile.id,\n                name: processedFile.name,\n                type,\n                duration: processedFile.metadata.duration\n            });\n            const duration = processedFile.metadata.duration || 0;\n            return {\n                id: processedFile.id,\n                name: processedFile.name,\n                type,\n                path: objectUrl,\n                duration,\n                originalDuration: duration,\n                initialDuration: duration,\n                maxDuration: duration\n            };\n        }\n        catch (error) {\n            showError(error instanceof Error ? error.message : 'Error processing file');\n            return null;\n        }\n    }, [items, validateFile, processFile, showError]);\n    const handleFiles = useCallback(async (files) => {\n        const newItems = [];\n        for (const file of files) {\n            const item = await validateAndProcessFile(file);\n            if (item) {\n                newItems.push(item);\n            }\n        }\n        if (newItems.length > 0) {\n            onImport(newItems);\n        }\n    }, [onImport, validateAndProcessFile]);\n    const handleDragEnter = useCallback((e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setIsDragOver(true);\n    }, []);\n    const handleDragOver = useCallback((e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setIsDragOver(true);\n    }, []);\n    const handleDragLeave = useCallback((e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const rect = e.currentTarget.getBoundingClientRect();\n        if (e.clientX <= rect.left ||\n            e.clientX >= rect.right ||\n            e.clientY <= rect.top ||\n            e.clientY >= rect.bottom) {\n            setIsDragOver(false);\n        }\n    }, []);\n    const handleDrop = useCallback(async (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setIsDragOver(false);\n        await handleFiles(Array.from(e.dataTransfer.files));\n    }, [handleFiles]);\n    const handleFileChange = useCallback(async (e) => {\n        const files = e.target.files;\n        if (files) {\n            await handleFiles(Array.from(files));\n            // Reset input value to allow selecting the same file again\n            e.target.value = '';\n        }\n    }, [handleFiles]);\n    return (React.createElement(\"div\", { className: `media-bin ${className} ${isDragOver ? 'drag-over' : ''}`, \"data-testid\": \"media-bin\", onDragEnter: handleDragEnter, onDragOver: handleDragOver, onDragLeave: handleDragLeave, onDrop: handleDrop },\n        errorMessage && (React.createElement(\"div\", { className: \"media-bin-error\", role: \"alert\", \"data-testid\": \"error-message\" }, errorMessage.text)),\n        React.createElement(\"div\", { className: \"media-bin-header\" },\n            React.createElement(\"h2\", null, \"Media\"),\n            React.createElement(\"button\", { className: \"media-bin-import-button\", \"data-testid\": \"media-bin-import-button\", onClick: () => document.getElementById('media-import-input')?.click() }, \"Import Media\")),\n        React.createElement(\"input\", { type: \"file\", id: \"media-import-input\", \"data-testid\": \"media-import-input\", style: { display: 'none' }, multiple: true, accept: \"video/*,audio/*,image/*,.srt,.vtt\", onChange: handleFileChange }),\n        React.createElement(\"div\", { className: \"media-bin-content\", \"data-testid\": \"media-bin-content\" }, items.length > 0 ? (React.createElement(\"div\", { className: \"media-bin-items\" }, items.map((item) => (React.createElement(MediaItemComponent, { key: item.id, item: item, onDragStart: (item) => {\n                logger.debug('Drag started:', item);\n            }, onDragEnd: () => {\n                logger.debug('Drag ended');\n            }, onClick: (item) => onSelect?.(item) }))))) : (React.createElement(\"div\", { className: \"media-bin-empty\", \"data-testid\": \"media-bin-empty\" },\n            React.createElement(\"p\", null, \"No media assets\"),\n            React.createElement(\"p\", null, \"Click Import Media to add files\"))))));\n};\nconst formatDuration = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n};\nexport default MediaBin;\n","__webpack_require__.h = () => (\"b67f32f4f1276031f3b9\")"],"names":[],"sourceRoot":""}