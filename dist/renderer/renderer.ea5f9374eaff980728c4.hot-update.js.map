{"version":3,"file":"renderer.ea5f9374eaff980728c4.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAgF;AAChD;AACsC;AACf;AACQ;AACtB;AAC2B;AAC7D,wBAAwB,oDAAa;AAC5C;AACA,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf;AACA;AACA,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf,IAAI,wDAAW;AACf;AACO;AACP,WAAW,8CAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,YAAY,iDAAM;AAClB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iDAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA,4CAA4C,iDAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iDAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA,oCAAoC,iDAAM;AAC1C;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,gCAAgC,iDAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iDAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iDAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE,iEAAiE;AACjE;AACA;AACA;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA,iBAAiB,wDAAW;AAC5B;AACA;AACA;AACA;AACA,yBAAyB,mEAAe;AACxC;AACA,+CAA+C,uEAAiB;AAChE,qEAAqE,uEAAiB;AACtF;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA,aAAa,wDAAW;AACxB;AACA;AACA;AACA;AACA;AACO,4BAA4B,UAAU;AAC7C,8BAA8B,iDAAU,kBAAkB,iEAAoB;AAC9E,8CAA8C,qDAAc;AAC5D,IAAI,gDAAS;AACb;AACA,qCAAqC,gFAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,QAAQ;AACpF;AACA,+EAA+E,QAAQ;AACvF,aAAa;AACb,YAAY,iDAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iDAAM;AAClB;AACA,0BAA0B;AAC1B,aAAa;AACb;AACA,KAAK;AACL,YAAY,0DAAmB,6BAA6B,SAAS,mBAAmB;AACxF;AACO;AACP,oBAAoB,iDAAU;AAC9B;AACA;AACA;AACA;AACA;;;;;;;;;UCpjBA","sources":["webpack://remotion-editor/./src/renderer/contexts/TimelineContext.tsx","webpack://remotion-editor/webpack/runtime/getFullHash"],"sourcesContent":["import React, { createContext, useReducer, useContext, useEffect } from 'react';\nimport { produce } from 'immer';\nimport { ActionTypes, initialTimelineState } from '../types/timeline';\nimport { createStateDiff } from '../utils/historyDiff';\nimport { TimelineConstants } from '../utils/timelineConstants';\nimport { logger } from '../utils/logger';\nimport { validateTimelineState } from '../utils/timelineValidation';\nexport const TimelineContext = createContext(undefined);\nconst NON_UNDOABLE_ACTIONS = new Set([\n    ActionTypes.SET_CURRENT_TIME,\n    ActionTypes.SET_PLAYING,\n    ActionTypes.SET_SCROLL_X,\n    ActionTypes.SET_SCROLL_Y,\n    ActionTypes.SET_DRAGGING,\n    ActionTypes.SET_ERROR,\n    ActionTypes.RESTORE_SNAPSHOT,\n    ActionTypes.SET_IS_PLAYING,\n    ActionTypes.SET_IS_DRAGGING,\n    ActionTypes.SET_SELECTED_CLIP_IDS,\n    ActionTypes.SELECT_CLIPS,\n    ActionTypes.SET_SELECTED_TRACK_ID,\n    ActionTypes.SET_DURATION\n]);\nconst CHECKPOINT_ACTIONS = new Set([\n    ActionTypes.ADD_TRACK,\n    ActionTypes.REMOVE_TRACK,\n    ActionTypes.ADD_CLIP,\n    ActionTypes.REMOVE_CLIP,\n    ActionTypes.SPLIT_CLIP,\n    ActionTypes.SET_TRACKS,\n    ActionTypes.MOVE_TRACK,\n    ActionTypes.MOVE_CLIP\n]);\nexport const timelineReducer = (state, action) => {\n    return produce(state, draft => {\n        let shouldCreateHistoryEntry = false;\n        let historyDescription = '';\n        let beforeState = state;\n        let isCheckpoint = false;\n        if (!NON_UNDOABLE_ACTIONS.has(action.type)) {\n            shouldCreateHistoryEntry = true;\n            historyDescription = getHistoryDescription(action);\n            beforeState = { ...state };\n            isCheckpoint = CHECKPOINT_ACTIONS.has(action.type);\n            logger.debug('Processing action:', {\n                type: action.type,\n                isCheckpoint,\n                description: historyDescription\n            });\n        }\n        switch (action.type) {\n            case ActionTypes.SET_STATE:\n                return action.payload;\n            case ActionTypes.SET_DURATION:\n                draft.duration = action.payload;\n                break;\n            case ActionTypes.SET_TRACKS:\n                draft.tracks = action.payload;\n                break;\n            case ActionTypes.SET_CURRENT_TIME:\n                draft.currentTime = action.payload.time;\n                break;\n            case ActionTypes.SET_PLAYING:\n                draft.isPlaying = action.payload;\n                break;\n            case ActionTypes.SET_SCROLL_X:\n                draft.scrollX = action.payload;\n                break;\n            case ActionTypes.SET_SCROLL_Y:\n                draft.scrollY = action.payload;\n                break;\n            case ActionTypes.SET_ZOOM:\n                draft.zoom = action.payload;\n                break;\n            case ActionTypes.SET_FPS:\n                draft.fps = action.payload;\n                break;\n            case ActionTypes.SET_DRAGGING:\n                draft.isDragging = action.payload.isDragging;\n                draft.dragStartX = action.payload.dragStartX;\n                draft.dragStartY = action.payload.dragStartY;\n                break;\n            case ActionTypes.SET_ERROR:\n                draft.error = action.payload;\n                break;\n            case ActionTypes.ADD_TRACK:\n                draft.tracks.push(action.payload.track);\n                break;\n            case ActionTypes.UPDATE_TRACK:\n                {\n                    const trackIndex = draft.tracks.findIndex(t => t.id === action.payload.trackId);\n                    if (trackIndex !== -1) {\n                        draft.tracks[trackIndex] = {\n                            ...draft.tracks[trackIndex],\n                            ...action.payload.track\n                        };\n                    }\n                }\n                break;\n            case ActionTypes.REMOVE_TRACK:\n                draft.tracks = draft.tracks.filter(t => t.id !== action.payload.trackId);\n                break;\n            case ActionTypes.ADD_CLIP:\n                {\n                    const trackToAddClip = draft.tracks.find(t => t.id === action.payload.trackId);\n                    if (trackToAddClip) {\n                        // Remove any existing clip with the same ID\n                        trackToAddClip.clips = trackToAddClip.clips.filter(c => c.id !== action.payload.clip.id);\n                        // Create new clip with provided values\n                        // Here we ensure that if initialBounds isn't already provided, we set it.\n                        const newClip = {\n                            ...action.payload.clip,\n                            startTime: action.payload.clip.startTime ?? 0,\n                            endTime: action.payload.clip.endTime ?? (action.payload.clip.duration ?? 0),\n                            // Preserve or create the reference to the source media\n                            initialBounds: action.payload.clip.initialBounds || {\n                                startTime: action.payload.clip.startTime ?? 0,\n                                endTime: action.payload.clip.endTime ?? (action.payload.clip.duration ?? 0),\n                                mediaOffset: action.payload.clip.mediaOffset ?? 0,\n                                mediaDuration: action.payload.clip.mediaDuration ?? ((action.payload.clip.endTime ?? 0) - (action.payload.clip.startTime ?? 0))\n                            }\n                        };\n                        if (!trackToAddClip.clips.some(c => c.id === newClip.id)) {\n                            trackToAddClip.clips.push(newClip);\n                            trackToAddClip.clips.sort((a, b) => a.startTime - b.startTime);\n                        }\n                    }\n                }\n                break;\n            case ActionTypes.UPDATE_CLIP:\n                {\n                    const trackWithClip = draft.tracks.find(t => t.id === action.payload.trackId);\n                    if (trackWithClip) {\n                        const clipIndex = trackWithClip.clips.findIndex(c => c.id === action.payload.clipId);\n                        if (clipIndex !== -1) {\n                            trackWithClip.clips[clipIndex] = {\n                                ...trackWithClip.clips[clipIndex],\n                                ...action.payload.clip\n                            };\n                        }\n                    }\n                }\n                break;\n            case ActionTypes.REMOVE_CLIP:\n                {\n                    const trackToRemoveClip = draft.tracks.find(t => t.id === action.payload.trackId);\n                    if (trackToRemoveClip) {\n                        trackToRemoveClip.clips = trackToRemoveClip.clips.filter(c => c.id !== action.payload.clipId);\n                    }\n                }\n                break;\n            case ActionTypes.MOVE_CLIP:\n                {\n                    const sourceTrack = draft.tracks.find(t => t.id === action.payload.sourceTrackId);\n                    const targetTrack = draft.tracks.find(t => t.id === action.payload.targetTrackId);\n                    if (sourceTrack && targetTrack) {\n                        const clipToMove = sourceTrack.clips.find(c => c.id === action.payload.clipId);\n                        if (clipToMove) {\n                            const desiredStart = Math.max(0, action.payload.newTime);\n                            const delta = desiredStart - clipToMove.startTime;\n                            const newStartTime = clipToMove.startTime + delta;\n                            const newEndTime = clipToMove.endTime + delta;\n                            // Update clip while preserving media references\n                            const updatedClip = {\n                                ...clipToMove,\n                                startTime: newStartTime,\n                                endTime: newEndTime,\n                                mediaOffset: clipToMove.mediaOffset + delta,\n                                // Update handles to maintain relative positions\n                                handles: {\n                                    startPosition: (clipToMove.handles?.startPosition ?? clipToMove.mediaOffset) + delta,\n                                    endPosition: (clipToMove.handles?.endPosition ?? (clipToMove.mediaOffset + (clipToMove.endTime - clipToMove.startTime))) + delta\n                                },\n                                // Update initial bounds to reflect new timeline position while preserving media duration\n                                initialBounds: {\n                                    ...clipToMove.initialBounds,\n                                    startTime: newStartTime,\n                                    endTime: newEndTime,\n                                    mediaOffset: (clipToMove.initialBounds?.mediaOffset ?? clipToMove.mediaOffset) + delta,\n                                    mediaDuration: clipToMove.initialBounds?.mediaDuration ?? clipToMove.mediaDuration\n                                }\n                            };\n                            logger.debug('Move clip:', {\n                                id: clipToMove.id,\n                                oldStartTime: clipToMove.startTime,\n                                oldEndTime: clipToMove.endTime,\n                                newStartTime,\n                                newEndTime,\n                                delta,\n                                mediaOffset: updatedClip.mediaOffset,\n                                handles: updatedClip.handles,\n                                initialBounds: updatedClip.initialBounds\n                            });\n                            if (sourceTrack.id === targetTrack.id) {\n                                const clipIndex = sourceTrack.clips.findIndex(c => c.id === clipToMove.id);\n                                if (clipIndex !== -1) {\n                                    sourceTrack.clips[clipIndex] = updatedClip;\n                                }\n                            }\n                            else {\n                                sourceTrack.clips = sourceTrack.clips.filter(c => c.id !== clipToMove.id);\n                                targetTrack.clips.push(updatedClip);\n                            }\n                        }\n                    }\n                }\n                break;\n            case ActionTypes.TRIM_CLIP:\n                {\n                    for (const track of draft.tracks) {\n                        const clipToTrim = track.clips.find(c => c.id === action.payload.clipId);\n                        if (clipToTrim) {\n                            const oldEndTime = clipToTrim.endTime;\n                            const clipIndex = track.clips.findIndex(c => c.id === clipToTrim.id);\n                            // In ripple mode, allow extending to full media duration\n                            const maxEndTime = clipToTrim.startTime + clipToTrim.mediaDuration;\n                            const minEndTime = clipToTrim.startTime + 0.1; // Minimum duration\n                            // Calculate new end time based on mode\n                            let newEndTime = oldEndTime;\n                            if (action.payload.ripple) {\n                                // In ripple mode, allow extending up to full media duration\n                                const targetEndTime = action.payload.endTime ?? oldEndTime;\n                                // Calculate the target change\n                                const totalChange = maxEndTime - oldEndTime;\n                                const requestedChange = targetEndTime - oldEndTime;\n                                // Calculate current duration\n                                const currentDuration = oldEndTime - clipToTrim.startTime;\n                                const targetDuration = 4.0; // Target 4s duration\n                                const maxDuration = clipToTrim.mediaDuration; // Maximum possible duration\n                                // Calculate the target end time based on the drag operation\n                                const dragTargetEndTime = action.payload.endTime ?? oldEndTime;\n                                const dragDirection = Math.sign(dragTargetEndTime - oldEndTime);\n                                // Track if we're at initial state (2s)\n                                const isInitialState = Math.abs(currentDuration - 2) < 0.01;\n                                const hasReachedTarget = currentDuration >= targetDuration;\n                                // Initialize ripple state if needed\n                                if (!draft.rippleState) {\n                                    draft.rippleState = {};\n                                }\n                                if (!(clipToTrim.id in draft.rippleState)) {\n                                    draft.rippleState[clipToTrim.id] = { initialExtensionDone: false };\n                                }\n                                if (dragDirection > 0) {\n                                    // Calculate total available extension and progress\n                                    const totalExtension = maxEndTime - clipToTrim.startTime;\n                                    const firstStepTarget = clipToTrim.startTime + targetDuration;\n                                    const dragProgress = dragTargetEndTime - oldEndTime;\n                                    const halfwayPoint = 1.0; // Require 1 second of drag for first extension\n                                    if (isInitialState && !draft.rippleState[clipToTrim.id].initialExtensionDone) {\n                                        if (dragProgress >= halfwayPoint) {\n                                            // First step: Extend to 4s\n                                            newEndTime = firstStepTarget;\n                                            draft.rippleState[clipToTrim.id].initialExtensionDone = true;\n                                            logger.debug('First extension to 4s:', {\n                                                clipId: clipToTrim.id,\n                                                currentDuration,\n                                                targetDuration,\n                                                newEndTime,\n                                                dragProgress,\n                                                halfwayPoint,\n                                                oldEndTime,\n                                                maxEndTime\n                                            });\n                                        }\n                                        else {\n                                            // Not dragged far enough yet, maintain current end time\n                                            newEndTime = oldEndTime;\n                                        }\n                                    }\n                                    else if (draft.rippleState[clipToTrim.id].initialExtensionDone || !isInitialState) {\n                                        // Second step: Allow extending beyond 4s up to media duration\n                                        newEndTime = Math.min(dragTargetEndTime, maxEndTime);\n                                        logger.debug('Extending beyond 4s:', {\n                                            clipId: clipToTrim.id,\n                                            dragTargetEndTime,\n                                            maxEndTime,\n                                            newEndTime,\n                                            dragProgress,\n                                            halfwayPoint\n                                        });\n                                    }\n                                }\n                                else {\n                                    // Handle trimming shorter\n                                    newEndTime = Math.max(dragTargetEndTime, minEndTime);\n                                    logger.debug('Trimming shorter:', {\n                                        clipId: clipToTrim.id,\n                                        dragTargetEndTime,\n                                        minEndTime,\n                                        newEndTime\n                                    });\n                                }\n                                // Log detailed ripple trim info\n                                logger.debug('Ripple trim calculation:', {\n                                    currentDuration,\n                                    targetDuration,\n                                    dragTargetEndTime,\n                                    newEndTime,\n                                    oldEndTime,\n                                    maxEndTime,\n                                    minEndTime,\n                                    clipStartTime: clipToTrim.startTime,\n                                    clipId: clipToTrim.id,\n                                    mediaDuration: clipToTrim.mediaDuration,\n                                    dragDirection\n                                });\n                            }\n                            else {\n                                // In normal mode, use provided end time\n                                newEndTime = action.payload.endTime !== undefined\n                                    ? Math.min(action.payload.endTime, maxEndTime)\n                                    : clipToTrim.endTime;\n                            }\n                            logger.debug('TRIM_CLIP action:', {\n                                clipId: clipToTrim.id,\n                                oldEndTime,\n                                newEndTime,\n                                maxEndTime,\n                                ripple: action.payload.ripple,\n                                mediaDuration: clipToTrim.mediaDuration,\n                                startTime: clipToTrim.startTime,\n                                handles: action.payload.handles\n                            });\n                            // Update the clip being trimmed\n                            track.clips[clipIndex] = {\n                                ...clipToTrim,\n                                endTime: newEndTime,\n                                handles: action.payload.handles || {\n                                    startPosition: clipToTrim.mediaOffset,\n                                    endPosition: clipToTrim.mediaOffset + (newEndTime - clipToTrim.startTime)\n                                }\n                            };\n                            // If ripple mode is enabled, shift subsequent clips accordingly.\n                            if (action.payload.ripple) {\n                                const deltaTime = newEndTime - oldEndTime;\n                                const subsequentClips = track.clips\n                                    .slice(clipIndex + 1)\n                                    .filter(c => c.startTime >= oldEndTime);\n                                subsequentClips.forEach((clipToMove) => {\n                                    const idx = track.clips.findIndex(c => c.id === clipToMove.id);\n                                    if (idx !== -1) {\n                                        const duration = clipToMove.endTime - clipToMove.startTime;\n                                        const newStart = clipToMove.startTime + deltaTime;\n                                        // Update clip while preserving media references\n                                        track.clips[idx] = {\n                                            ...clipToMove,\n                                            startTime: newStart,\n                                            endTime: newStart + duration,\n                                            mediaOffset: clipToMove.mediaOffset + deltaTime,\n                                            // Update handles to maintain relative positions\n                                            handles: {\n                                                startPosition: (clipToMove.handles?.startPosition ?? clipToMove.mediaOffset) + deltaTime,\n                                                endPosition: (clipToMove.handles?.endPosition ?? (clipToMove.mediaOffset + duration)) + deltaTime\n                                            },\n                                            // Update initial bounds to reflect new timeline position while preserving media duration\n                                            initialBounds: {\n                                                ...clipToMove.initialBounds,\n                                                startTime: newStart,\n                                                endTime: newStart + duration,\n                                                mediaOffset: (clipToMove.initialBounds?.mediaOffset ?? clipToMove.mediaOffset) + deltaTime,\n                                                mediaDuration: clipToMove.initialBounds?.mediaDuration ?? clipToMove.mediaDuration\n                                            }\n                                        };\n                                    }\n                                });\n                                track.clips.sort((a, b) => a.startTime - b.startTime);\n                            }\n                        }\n                    }\n                }\n                break;\n            case ActionTypes.SPLIT_CLIP:\n                {\n                    const trackToSplit = draft.tracks.find(t => t.id === action.payload.trackId);\n                    if (trackToSplit) {\n                        const clipToSplit = trackToSplit.clips.find(c => c.id === action.payload.clipId);\n                        if (clipToSplit && action.payload.time > clipToSplit.startTime && action.payload.time < clipToSplit.endTime) {\n                            const splitPoint = action.payload.time;\n                            const firstDuration = splitPoint - clipToSplit.startTime;\n                            const secondDuration = clipToSplit.endTime - splitPoint;\n                            // Use initialBounds as the reference for the source media.\n                            const originalMediaOffset = clipToSplit.initialBounds?.mediaOffset ?? clipToSplit.mediaOffset;\n                            const originalMediaDuration = clipToSplit.initialBounds?.mediaDuration ?? clipToSplit.mediaDuration;\n                            // Calculate media positions relative to original source\n                            const firstMediaStart = originalMediaOffset;\n                            const firstMediaEnd = originalMediaOffset + firstDuration;\n                            const secondMediaStart = originalMediaOffset + firstDuration;\n                            const secondMediaEnd = originalMediaOffset + originalMediaDuration;\n                            // Get full media duration from source clip\n                            const fullMediaDuration = originalMediaDuration;\n                            // Create first clip with full media duration for proper extension\n                            const firstClip = {\n                                ...clipToSplit,\n                                id: `${clipToSplit.id}-1`,\n                                endTime: splitPoint,\n                                // Set full media duration so TRIM_CLIP can allow extension up to the full source length\n                                mediaDuration: fullMediaDuration,\n                                mediaOffset: firstMediaStart,\n                                handles: {\n                                    startPosition: firstMediaStart,\n                                    endPosition: firstMediaEnd\n                                },\n                                // Set reference bounds for first segment\n                                initialBounds: {\n                                    startTime: clipToSplit.startTime,\n                                    endTime: splitPoint,\n                                    mediaOffset: firstMediaStart,\n                                    mediaDuration: fullMediaDuration\n                                }\n                            };\n                            // Create second clip with full media duration for proper extension\n                            const secondClip = {\n                                ...clipToSplit,\n                                id: `${clipToSplit.id}-2`,\n                                startTime: splitPoint,\n                                mediaOffset: secondMediaStart,\n                                // Keep full media duration for the second clip\n                                mediaDuration: fullMediaDuration,\n                                handles: {\n                                    startPosition: secondMediaStart,\n                                    endPosition: secondMediaEnd\n                                },\n                                // Set reference bounds for second segment\n                                initialBounds: {\n                                    startTime: splitPoint,\n                                    endTime: clipToSplit.endTime,\n                                    mediaOffset: secondMediaStart,\n                                    mediaDuration: fullMediaDuration\n                                }\n                            };\n                            logger.debug('Split clip:', {\n                                original: {\n                                    id: clipToSplit.id,\n                                    startTime: clipToSplit.startTime,\n                                    endTime: clipToSplit.endTime,\n                                    mediaOffset: originalMediaOffset,\n                                    mediaDuration: originalMediaDuration,\n                                    initialBounds: clipToSplit.initialBounds\n                                },\n                                first: {\n                                    id: firstClip.id,\n                                    startTime: firstClip.startTime,\n                                    endTime: firstClip.endTime,\n                                    mediaOffset: firstClip.mediaOffset,\n                                    mediaDuration: firstClip.mediaDuration,\n                                    initialBounds: firstClip.initialBounds,\n                                    handles: firstClip.handles\n                                },\n                                second: {\n                                    id: secondClip.id,\n                                    startTime: secondClip.startTime,\n                                    endTime: secondClip.endTime,\n                                    mediaOffset: secondClip.mediaOffset,\n                                    mediaDuration: secondClip.mediaDuration,\n                                    initialBounds: secondClip.initialBounds,\n                                    handles: secondClip.handles\n                                }\n                            });\n                            // Remove the original clip\n                            trackToSplit.clips = trackToSplit.clips.filter(c => c.id !== clipToSplit.id);\n                            // Push the split clips\n                            trackToSplit.clips.push(firstClip, secondClip);\n                            trackToSplit.clips.sort((a, b) => a.startTime - b.startTime);\n                            draft.selectedClipIds = [firstClip.id, secondClip.id];\n                            // Reset ripple state for the new clips so they start fresh.\n                            if (!draft.rippleState) {\n                                draft.rippleState = {};\n                            }\n                            draft.rippleState[firstClip.id] = { initialExtensionDone: false };\n                            draft.rippleState[secondClip.id] = { initialExtensionDone: false };\n                        }\n                    }\n                }\n                break;\n            case ActionTypes.SELECT_CLIPS:\n                draft.selectedClipIds = action.payload.clipIds;\n                break;\n            case ActionTypes.SET_SELECTED_CLIP_IDS:\n                draft.selectedClipIds = action.payload;\n                break;\n            case ActionTypes.SET_SELECTED_TRACK_ID:\n                draft.selectedTrackId = action.payload;\n                break;\n        }\n        if (shouldCreateHistoryEntry) {\n            const diff = createStateDiff(beforeState, draft, historyDescription, isCheckpoint);\n            draft.history.entries.push(diff);\n            if (draft.history.entries.length > TimelineConstants.History.MAX_HISTORY_SIZE) {\n                draft.history.entries = draft.history.entries.slice(-TimelineConstants.History.MAX_HISTORY_SIZE);\n            }\n            draft.history.currentIndex = draft.history.entries.length - 1;\n        }\n    });\n};\nconst getHistoryDescription = (action) => {\n    switch (action.type) {\n        case ActionTypes.ADD_TRACK:\n            return 'Add track';\n        case ActionTypes.REMOVE_TRACK:\n            return 'Remove track';\n        case ActionTypes.ADD_CLIP:\n            return 'Add clip';\n        case ActionTypes.REMOVE_CLIP:\n            return 'Remove clip';\n        case ActionTypes.MOVE_CLIP:\n            return 'Move clip';\n        case ActionTypes.SPLIT_CLIP:\n            return 'Split clip';\n        case ActionTypes.TRIM_CLIP:\n            return 'Trim clip';\n        case ActionTypes.SET_ZOOM:\n            return 'Change zoom';\n        case ActionTypes.SET_FPS:\n            return 'Change FPS';\n        default:\n            return action.type;\n    }\n};\nexport const TimelineProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(timelineReducer, initialTimelineState);\n    const [isInitialized, setIsInitialized] = React.useState(false);\n    useEffect(() => {\n        try {\n            const validationErrors = validateTimelineState(state);\n            window.timelineState = {\n                ...state,\n                dispatch\n            };\n            window.timelineDispatch = dispatch;\n            setIsInitialized(true);\n            window.timelineReady = true;\n            const detail = {\n                state,\n                dispatch,\n                isValid: validationErrors.length === 0,\n                errors: validationErrors\n            };\n            window.dispatchEvent(new CustomEvent('timeline:initializing', { detail }));\n            requestAnimationFrame(() => {\n                window.dispatchEvent(new CustomEvent('timeline:initialized', { detail }));\n            });\n            logger.debug('[Timeline] Initialization complete:', detail);\n            return () => {\n                window.timelineReady = false;\n                window.timelineState = undefined;\n                window.timelineDispatch = undefined;\n            };\n        }\n        catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            logger.error('[Timeline] Initialization failed:', new Error(errorMessage));\n            window.dispatchEvent(new CustomEvent('timeline:error', {\n                detail: { error: new Error(errorMessage), state }\n            }));\n        }\n    }, [state, dispatch]);\n    return (React.createElement(TimelineContext.Provider, { value: { state, dispatch } }, children));\n};\nexport const useTimelineContext = () => {\n    const context = useContext(TimelineContext);\n    if (!context) {\n        throw new Error('useTimelineContext must be used within a TimelineProvider');\n    }\n    return context;\n};\n","__webpack_require__.h = () => (\"2f629afc2b81247a6ab7\")"],"names":[],"sourceRoot":""}