{"version":3,"file":"renderer.9e40adf367f1091b7a5b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAA2C;AACF;AACY;AACK;AACK;AACxD,8BAA8B,uHAAuH;AAC5J,4BAA4B,kDAAW;AACvC;AACA,QAAQ,iDAAM;AACd;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,uBAAuB,kDAAW;AAClC;AACA,oBAAoB;AACpB,QAAQ,iDAAM;AACd;AACA;AACA,SAAS;AACT,KAAK;AACL,0BAA0B,kDAAW;AACrC;AACA;AACA,qCAAqC,uEAAiB,oCAAoC,uEAAiB;AAC3G,QAAQ,iDAAM;AACd;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,iEAAiE,6DAAc;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,UAAU,kCAAkC,kCAAkC,6DAAc,OAAO,kHAAkH,6DAAc;AAClQ,qBAAqB,gBAAgB;AACrC,sBAAsB,4BAA4B;AAClD,WAAW;AACX,QAAQ,0DAAmB,UAAU,wLAAwL;AAC7N,QAAQ,0DAAmB,UAAU,0CAA0C;AAC/E,YAAY,0DAAmB,CAAC,mEAAkB,IAAI;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB,yCAAyC;AAC1D,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E,QAAQ,0DAAmB,UAAU,yLAAyL;AAC9N;;;;;;;;;UCjFA","sources":["webpack://remotion-editor/./src/renderer/components/TimelineTransition.tsx","webpack://remotion-editor/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { logger } from '../utils/logger';\nimport { TransitionType } from '../types/transition';\nimport { TransitionRenderer } from './TransitionRenderer';\nimport { TimelineConstants } from '../utils/timelineConstants';\nexport const TimelineTransition = ({ id, type, startTime, endTime, duration, clipAId, clipBId, clipAThumbnail, clipBThumbnail, direction, onDurationChange }) => {\n    const handleDragStart = useCallback((e) => {\n        e.stopPropagation();\n        logger.debug('Starting transition handle drag:', {\n            id,\n            type,\n            startTime,\n            endTime,\n            duration\n        });\n    }, [id, type, startTime, endTime, duration]);\n    const handleDrag = useCallback((e) => {\n        if (!e.clientX)\n            return; // Ignore invalid drag events\n        logger.debug('Dragging transition handle:', {\n            clientX: e.clientX,\n            duration\n        });\n    }, [duration]);\n    const handleDragEnd = useCallback((e) => {\n        if (!e.clientX)\n            return;\n        const newDuration = Math.max(TimelineConstants.Transitions.MIN_DURATION, Math.min(TimelineConstants.Transitions.MAX_DURATION, duration + (e.clientX - e.currentTarget.getBoundingClientRect().left) / 100));\n        logger.debug('Ending transition handle drag:', {\n            id,\n            oldDuration: duration,\n            newDuration\n        });\n        onDurationChange(newDuration);\n    }, [id, duration, onDurationChange]);\n    const getTransitionIcon = () => {\n        const transitionType = typeof type === 'string' ? type : TransitionType[type];\n        switch (transitionType) {\n            case 'dissolve':\n            case 'crossfade':\n                return '↔️';\n            case 'fade':\n                return '🌅';\n            case 'wipe':\n                return '➡️';\n            case 'slide':\n                return '⏩';\n            case 'zoom':\n                return '🔍';\n            case 'push':\n                return '👉';\n            default:\n                return '↔️';\n        }\n    };\n    return (React.createElement(\"div\", { className: `timeline-transition ${typeof type === 'string' ? type : TransitionType[type]}`, \"data-testid\": \"timeline-transition\", \"data-transition-id\": id, \"data-type\": typeof type === 'string' ? type : TransitionType[type], \"data-duration\": Number(duration), \"data-direction\": direction, style: {\n            left: `${startTime * 100}px`,\n            width: `${(endTime - startTime) * 100}px`\n        } },\n        React.createElement(\"div\", { className: \"timeline-transition-handle left\", \"data-testid\": \"timeline-transition-handle\", draggable: true, onDragStart: handleDragStart, onDrag: handleDrag, onDragEnd: handleDragEnd }),\n        React.createElement(\"div\", { className: \"timeline-transition-preview\" },\n            React.createElement(TransitionRenderer, { transition: {\n                    id,\n                    type: type,\n                    duration: Number(duration),\n                    clipAId,\n                    clipBId,\n                    params: {}\n                }, fromClip: {\n                    id: clipAId,\n                    thumbnail: clipAThumbnail || '/test.webm',\n                    duration: 2,\n                    startTime: startTime\n                }, toClip: {\n                    id: clipBId,\n                    thumbnail: clipBThumbnail || '/test.webm',\n                    duration: 2,\n                    startTime: endTime - duration\n                }, progress: 0.5, width: 200, height: 20 })),\n        React.createElement(\"div\", { className: \"timeline-transition-icon\" }, getTransitionIcon()),\n        React.createElement(\"div\", { className: \"timeline-transition-handle right\", \"data-testid\": \"timeline-transition-handle\", draggable: true, onDragStart: handleDragStart, onDrag: handleDrag, onDragEnd: handleDragEnd })));\n};\n","__webpack_require__.h = () => (\"2f75313aea73cd52b107\")"],"names":[],"sourceRoot":""}