{"version":3,"file":"renderer.706e0ba66f6e04d04209.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACA;AACzC,0BAA0B,iLAAiL;AAClN;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,UAAU,wCAAwC;AACjF,QAAQ,0DAAmB,UAAU,uCAAuC,yBAAyB,0DAAmB,CAAC,yDAAa,IAAI,8NAA8N;AACxW,QAAQ,0DAAmB,UAAU,+GAA+G;AACpJ,YAAY,0DAAmB,UAAU;AACzC;AACA;AACA;AACA;AACA,mBAAmB;AACnB,mCAAmC,0DAAmB,CAAC,yDAAa,IAAI,qVAAqV;AAC7Z,oCAAoC,0DAAmB,UAAU,oCAAoC;AACrG,gBAAgB,0DAAmB;AACnC;;;;;;;;;UCrDA","sources":["webpack://remotion-editor/./src/renderer/components/TimelineTracks.tsx","webpack://remotion-editor/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { TimelineTrack } from './TimelineTrack';\nimport { TrackControls } from './TrackControls';\nexport const TimelineTracks = ({ tracks, selectedTrackId, selectedClipIds, onSelectTrack, onSelectClip, onClipDragStart, onClipDragEnd, onToggleVisibility, onUpdateTrack, onDeleteTrack, onMoveTrack, zoom, fps }) => {\n    // Log track rendering\n    useEffect(() => {\n        // Update tracks when state changes\n        if (tracksRef.current) {\n            const height = tracks.length * TimelineConstants.UI.TRACK_HEIGHT;\n            tracksRef.current.style.height = `${height}px`;\n            // Force reflow to ensure height is applied\n            void tracksRef.current.offsetHeight;\n            // Notify that tracks container is ready\n            window.dispatchEvent(new CustomEvent('tracks:ready', {\n                detail: {\n                    height,\n                    trackCount: tracks.length\n                }\n            }));\n            // Wait for next frame to ensure DOM is updated\n            requestAnimationFrame(() => {\n                if (tracksRef.current) {\n                    // Get final dimensions after styles are applied\n                    const rect = tracksRef.current.getBoundingClientRect();\n                    // Notify that tracks are positioned\n                    window.dispatchEvent(new CustomEvent('tracks:positioned', {\n                        detail: {\n                            height: rect.height,\n                            trackCount: tracks.length\n                        }\n                    }));\n                }\n            });\n        }\n    }, [tracks.length]);\n    const handleContainerClick = (e) => {\n        // Only deselect if clicking directly on the container (not on tracks)\n        if (e.target === e.currentTarget || e.target.classList.contains('timeline-tracks-background')) {\n            onSelectTrack('');\n        }\n    };\n    return (React.createElement(\"div\", { className: \"timeline-tracks-container\" },\n        React.createElement(\"div\", { className: \"timeline-tracks-controls\" }, tracks.map((track) => (React.createElement(TrackControls, { key: track.id, track: track, isSelected: track.id === selectedTrackId, onSelect: onSelectTrack, onUpdateTrack: onUpdateTrack, onDeleteTrack: onDeleteTrack, onMoveTrack: onMoveTrack, onToggleVisibility: onToggleVisibility })))),\n        React.createElement(\"div\", { className: \"timeline-tracks-content\", \"data-testid\": \"timeline-tracks-content\", onClick: handleContainerClick },\n            React.createElement(\"div\", { className: \"timeline-tracks-background\", style: {\n                    position: 'absolute',\n                    inset: 0,\n                    zIndex: -1,\n                    minHeight: '100%'\n                } }),\n            tracks.map((track) => (React.createElement(TimelineTrack, { key: track.id, track: track, isSelected: track.id === selectedTrackId, zoom: zoom, fps: fps, onSelectTrack: onSelectTrack, onSelectClip: onSelectClip, onClipDragStart: onClipDragStart, onClipDragEnd: onClipDragEnd, onUpdateTrack: onUpdateTrack, onDeleteTrack: onDeleteTrack, onMoveTrack: onMoveTrack, onToggleVisibility: onToggleVisibility }))),\n            tracks.length === 0 && (React.createElement(\"div\", { className: \"timeline-tracks-empty\" },\n                React.createElement(\"span\", null, \"No tracks to display\"))))));\n};\n","__webpack_require__.h = () => (\"4d43c7189d3c28c6fb25\")"],"names":[],"sourceRoot":""}